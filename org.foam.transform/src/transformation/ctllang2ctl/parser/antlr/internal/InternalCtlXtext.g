/*
* generated by Xtext
*/
grammar InternalCtlXtext;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package transformation.ctllang2ctl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package transformation.ctllang2ctl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import transformation.ctllang2ctl.services.CtlXtextGrammarAccess;

}

@parser::members {

 	private CtlXtextGrammarAccess grammarAccess;
 	
    public InternalCtlXtextParser(TokenStream input, CtlXtextGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "RuleStart";	
   	}
   	
   	@Override
   	protected CtlXtextGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleRuleStart
entryRuleRuleStart returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRuleStartRule()); }
	 iv_ruleRuleStart=ruleRuleStart 
	 { $current=$iv_ruleRuleStart.current; } 
	 EOF 
;

// Rule RuleStart
ruleRuleStart returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getRuleStartAccess().getRuleArrowParserRuleCall()); 
    }
    this_RuleArrow_0=ruleRuleArrow
    { 
        $current = $this_RuleArrow_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleRuleSimple
entryRuleRuleSimple returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRuleSimpleRule()); }
	 iv_ruleRuleSimple=ruleRuleSimple 
	 { $current=$iv_ruleRuleSimple.current; } 
	 EOF 
;

// Rule RuleSimple
ruleRuleSimple returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((((
    {
        $current = forceCreateModelElement(
            grammarAccess.getRuleSimpleAccess().getAllGloballyAction_0_0_0_0(),
            $current);
    }
)	otherlv_1='AG' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRuleSimpleAccess().getAGKeyword_0_0_0_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getRuleSimpleAccess().getAllFinallyAction_0_0_1_0(),
            $current);
    }
)	otherlv_3='AF' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRuleSimpleAccess().getAFKeyword_0_0_1_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getRuleSimpleAccess().getAllNextAction_0_0_2_0(),
            $current);
    }
)	otherlv_5='AX' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getRuleSimpleAccess().getAXKeyword_0_0_2_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getRuleSimpleAccess().getExistsGloballyAction_0_0_3_0(),
            $current);
    }
)	otherlv_7='EG' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getRuleSimpleAccess().getEGKeyword_0_0_3_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getRuleSimpleAccess().getExistsFinallyAction_0_0_4_0(),
            $current);
    }
)	otherlv_9='EF' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getRuleSimpleAccess().getEFKeyword_0_0_4_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getRuleSimpleAccess().getExistsNextAction_0_0_5_0(),
            $current);
    }
)	otherlv_11='EX' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getRuleSimpleAccess().getEXKeyword_0_0_5_1());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleSimpleAccess().getFormulaRuleStartParserRuleCall_0_1_0()); 
	    }
		lv_formula_12_0=ruleRuleStart		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleSimpleRule());
	        }
       		set(
       			$current, 
       			"formula",
        		lv_formula_12_0, 
        		"RuleStart");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((((
    {
        $current = forceCreateModelElement(
            grammarAccess.getRuleSimpleAccess().getAllUntilAction_1_0_0_0(),
            $current);
    }
)	otherlv_14='A' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getRuleSimpleAccess().getAKeyword_1_0_0_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getRuleSimpleAccess().getExistsUntilAction_1_0_1_0(),
            $current);
    }
)	otherlv_16='E' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getRuleSimpleAccess().getEKeyword_1_0_1_1());
    }
))	otherlv_17='[' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getRuleSimpleAccess().getLeftSquareBracketKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleSimpleAccess().getLeftRuleStartParserRuleCall_1_2_0()); 
	    }
		lv_left_18_0=ruleRuleStart		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleSimpleRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_18_0, 
        		"RuleStart");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_19='U' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getRuleSimpleAccess().getUKeyword_1_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleSimpleAccess().getRightRuleStartParserRuleCall_1_4_0()); 
	    }
		lv_right_20_0=ruleRuleStart		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleSimpleRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_20_0, 
        		"RuleStart");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_21=']' 
    {
    	newLeafNode(otherlv_21, grammarAccess.getRuleSimpleAccess().getRightSquareBracketKeyword_1_5());
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getRuleSimpleAccess().getRuleUnaryPropositionalLogicParserRuleCall_2()); 
    }
    this_RuleUnaryPropositionalLogic_22=ruleRuleUnaryPropositionalLogic
    { 
        $current = $this_RuleUnaryPropositionalLogic_22.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleRuleArrow
entryRuleRuleArrow returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRuleArrowRule()); }
	 iv_ruleRuleArrow=ruleRuleArrow 
	 { $current=$iv_ruleRuleArrow.current; } 
	 EOF 
;

// Rule RuleArrow
ruleRuleArrow returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getRuleArrowAccess().getRuleDisjunctionParserRuleCall_0()); 
    }
    this_RuleDisjunction_0=ruleRuleDisjunction
    { 
        $current = $this_RuleDisjunction_0.current; 
        afterParserOrEnumRuleCall();
    }
((((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getRuleArrowAccess().getImplicationLeftAction_1_0_0_0(),
            $current);
    }
)	otherlv_2='->' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRuleArrowAccess().getHyphenMinusGreaterThanSignKeyword_1_0_0_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getRuleArrowAccess().getEquivalenceLeftAction_1_0_1_0(),
            $current);
    }
)	otherlv_4='<->' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRuleArrowAccess().getLessThanSignHyphenMinusGreaterThanSignKeyword_1_0_1_1());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleArrowAccess().getRightRuleDisjunctionParserRuleCall_1_1_0()); 
	    }
		lv_right_5_0=ruleRuleDisjunction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleArrowRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_5_0, 
        		"RuleDisjunction");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleRuleDisjunction
entryRuleRuleDisjunction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRuleDisjunctionRule()); }
	 iv_ruleRuleDisjunction=ruleRuleDisjunction 
	 { $current=$iv_ruleRuleDisjunction.current; } 
	 EOF 
;

// Rule RuleDisjunction
ruleRuleDisjunction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getRuleDisjunctionAccess().getRuleConjunctionParserRuleCall_0()); 
    }
    this_RuleConjunction_0=ruleRuleConjunction
    { 
        $current = $this_RuleConjunction_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getRuleDisjunctionAccess().getOrLeftAction_1_0(),
            $current);
    }
)	otherlv_2='|' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRuleDisjunctionAccess().getVerticalLineKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleDisjunctionAccess().getRightRuleConjunctionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleRuleConjunction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleDisjunctionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"RuleConjunction");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleRuleConjunction
entryRuleRuleConjunction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRuleConjunctionRule()); }
	 iv_ruleRuleConjunction=ruleRuleConjunction 
	 { $current=$iv_ruleRuleConjunction.current; } 
	 EOF 
;

// Rule RuleConjunction
ruleRuleConjunction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getRuleConjunctionAccess().getRuleSimpleParserRuleCall_0()); 
    }
    this_RuleSimple_0=ruleRuleSimple
    { 
        $current = $this_RuleSimple_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getRuleConjunctionAccess().getAndLeftAction_1_0(),
            $current);
    }
)	otherlv_2='&' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRuleConjunctionAccess().getAmpersandKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleConjunctionAccess().getRightRuleSimpleParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleRuleSimple		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleConjunctionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"RuleSimple");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleRuleUnaryPropositionalLogic
entryRuleRuleUnaryPropositionalLogic returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRuleUnaryPropositionalLogicRule()); }
	 iv_ruleRuleUnaryPropositionalLogic=ruleRuleUnaryPropositionalLogic 
	 { $current=$iv_ruleRuleUnaryPropositionalLogic.current; } 
	 EOF 
;

// Rule RuleUnaryPropositionalLogic
ruleRuleUnaryPropositionalLogic returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getRuleUnaryPropositionalLogicAccess().getNotAction_0_0(),
            $current);
    }
)	otherlv_1='!' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRuleUnaryPropositionalLogicAccess().getExclamationMarkKeyword_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleUnaryPropositionalLogicAccess().getFormulaRuleStartParserRuleCall_0_2_0()); 
	    }
		lv_formula_2_0=ruleRuleStart		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleUnaryPropositionalLogicRule());
	        }
       		set(
       			$current, 
       			"formula",
        		lv_formula_2_0, 
        		"RuleStart");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |
    { 
        newCompositeNode(grammarAccess.getRuleUnaryPropositionalLogicAccess().getRuleAtomicParserRuleCall_1()); 
    }
    this_RuleAtomic_3=ruleRuleAtomic
    { 
        $current = $this_RuleAtomic_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleRuleAtomic
entryRuleRuleAtomic returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRuleAtomicRule()); }
	 iv_ruleRuleAtomic=ruleRuleAtomic 
	 { $current=$iv_ruleRuleAtomic.current; } 
	 EOF 
;

// Rule RuleAtomic
ruleRuleAtomic returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRuleAtomicAccess().getLeftParenthesisKeyword_0_0());
    }

    { 
        newCompositeNode(grammarAccess.getRuleAtomicAccess().getRuleStartParserRuleCall_0_1()); 
    }
    this_RuleStart_1=ruleRuleStart
    { 
        $current = $this_RuleStart_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRuleAtomicAccess().getRightParenthesisKeyword_0_2());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getRuleAtomicAccess().getRuleVariableUseAction_1_0(),
            $current);
    }
)(
(
		lv_variable_4_0=RULE_ID
		{
			newLeafNode(lv_variable_4_0, grammarAccess.getRuleAtomicAccess().getVariableIDTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRuleAtomicRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"variable",
        		lv_variable_4_0, 
        		"ID");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getRuleAtomicAccess().getTrueAction_2_0(),
            $current);
    }
)	otherlv_6='true' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getRuleAtomicAccess().getTrueKeyword_2_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getRuleAtomicAccess().getFalseAction_3_0(),
            $current);
    }
)	otherlv_8='false' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getRuleAtomicAccess().getFalseKeyword_3_1());
    }
))
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


