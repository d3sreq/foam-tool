/*
* generated by Xtext
*/
package transformation.ctllang2ctl.services;

import java.util.List;

import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

import transformation.propositionallogiclang2propositionallogic.services.PropositionalLogicXtextGrammarAccess;

import com.google.inject.Inject;
import com.google.inject.Singleton;

@Singleton
public class CtlXtextGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class RuleStartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RuleStart");
		private final RuleCall cRuleArrowParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// overwritten to include "start" rule. 
		//
		//// Without this overwrite grammar would use only RuleSimple and 
		//
		//// wouldn't be able to parse formulas containing "->", "<->", etc.
		//
		//RuleStart returns Formula:
		//	RuleArrow;
		public ParserRule getRule() { return rule; }

		//RuleArrow
		public RuleCall getRuleArrowParserRuleCall() { return cRuleArrowParserRuleCall; }
	}

	public class RuleSimpleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RuleSimple");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Group cGroup_0_0_0 = (Group)cAlternatives_0_0.eContents().get(0);
		private final Action cAllGloballyAction_0_0_0_0 = (Action)cGroup_0_0_0.eContents().get(0);
		private final Keyword cAGKeyword_0_0_0_1 = (Keyword)cGroup_0_0_0.eContents().get(1);
		private final Group cGroup_0_0_1 = (Group)cAlternatives_0_0.eContents().get(1);
		private final Action cAllFinallyAction_0_0_1_0 = (Action)cGroup_0_0_1.eContents().get(0);
		private final Keyword cAFKeyword_0_0_1_1 = (Keyword)cGroup_0_0_1.eContents().get(1);
		private final Group cGroup_0_0_2 = (Group)cAlternatives_0_0.eContents().get(2);
		private final Action cAllNextAction_0_0_2_0 = (Action)cGroup_0_0_2.eContents().get(0);
		private final Keyword cAXKeyword_0_0_2_1 = (Keyword)cGroup_0_0_2.eContents().get(1);
		private final Group cGroup_0_0_3 = (Group)cAlternatives_0_0.eContents().get(3);
		private final Action cExistsGloballyAction_0_0_3_0 = (Action)cGroup_0_0_3.eContents().get(0);
		private final Keyword cEGKeyword_0_0_3_1 = (Keyword)cGroup_0_0_3.eContents().get(1);
		private final Group cGroup_0_0_4 = (Group)cAlternatives_0_0.eContents().get(4);
		private final Action cExistsFinallyAction_0_0_4_0 = (Action)cGroup_0_0_4.eContents().get(0);
		private final Keyword cEFKeyword_0_0_4_1 = (Keyword)cGroup_0_0_4.eContents().get(1);
		private final Group cGroup_0_0_5 = (Group)cAlternatives_0_0.eContents().get(5);
		private final Action cExistsNextAction_0_0_5_0 = (Action)cGroup_0_0_5.eContents().get(0);
		private final Keyword cEXKeyword_0_0_5_1 = (Keyword)cGroup_0_0_5.eContents().get(1);
		private final Assignment cFormulaAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cFormulaRuleStartParserRuleCall_0_1_0 = (RuleCall)cFormulaAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cAllUntilAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cAKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cExistsUntilAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cEKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cLeftAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cLeftRuleStartParserRuleCall_1_2_0 = (RuleCall)cLeftAssignment_1_2.eContents().get(0);
		private final Keyword cUKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cRightAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cRightRuleStartParserRuleCall_1_4_0 = (RuleCall)cRightAssignment_1_4.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final RuleCall cRuleUnaryPropositionalLogicParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		////	overwritten rule from propositionallogic to add CTL specific formulas
		//
		//RuleSimple returns Formula:
		//	({AllGlobally} "AG" | {AllFinally} "AF" | {AllNext} "AX" | {ExistsGlobally} "EG" | {ExistsFinally} "EF" | {ExistsNext}
		//	"EX") formula=RuleStart | ({AllUntil} "A" | {ExistsUntil} "E") "[" left=RuleStart "U" right=RuleStart "]" |
		//	RuleUnaryPropositionalLogic;
		public ParserRule getRule() { return rule; }

		//({AllGlobally} "AG" | {AllFinally} "AF" | {AllNext} "AX" | {ExistsGlobally} "EG" | {ExistsFinally} "EF" | {ExistsNext}
		//"EX") formula=RuleStart | ({AllUntil} "A" | {ExistsUntil} "E") "[" left=RuleStart "U" right=RuleStart "]" |
		//RuleUnaryPropositionalLogic
		public Alternatives getAlternatives() { return cAlternatives; }

		//({AllGlobally} "AG" | {AllFinally} "AF" | {AllNext} "AX" | {ExistsGlobally} "EG" | {ExistsFinally} "EF" | {ExistsNext}
		//"EX") formula=RuleStart
		public Group getGroup_0() { return cGroup_0; }

		//{AllGlobally} "AG" | {AllFinally} "AF" | {AllNext} "AX" | {ExistsGlobally} "EG" | {ExistsFinally} "EF" | {ExistsNext}
		//"EX"
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }

		//{AllGlobally} "AG"
		public Group getGroup_0_0_0() { return cGroup_0_0_0; }

		//{AllGlobally}
		public Action getAllGloballyAction_0_0_0_0() { return cAllGloballyAction_0_0_0_0; }

		//"AG"
		public Keyword getAGKeyword_0_0_0_1() { return cAGKeyword_0_0_0_1; }

		//{AllFinally} "AF"
		public Group getGroup_0_0_1() { return cGroup_0_0_1; }

		//{AllFinally}
		public Action getAllFinallyAction_0_0_1_0() { return cAllFinallyAction_0_0_1_0; }

		//"AF"
		public Keyword getAFKeyword_0_0_1_1() { return cAFKeyword_0_0_1_1; }

		//{AllNext} "AX"
		public Group getGroup_0_0_2() { return cGroup_0_0_2; }

		//{AllNext}
		public Action getAllNextAction_0_0_2_0() { return cAllNextAction_0_0_2_0; }

		//"AX"
		public Keyword getAXKeyword_0_0_2_1() { return cAXKeyword_0_0_2_1; }

		//{ExistsGlobally} "EG"
		public Group getGroup_0_0_3() { return cGroup_0_0_3; }

		//{ExistsGlobally}
		public Action getExistsGloballyAction_0_0_3_0() { return cExistsGloballyAction_0_0_3_0; }

		//"EG"
		public Keyword getEGKeyword_0_0_3_1() { return cEGKeyword_0_0_3_1; }

		//{ExistsFinally} "EF"
		public Group getGroup_0_0_4() { return cGroup_0_0_4; }

		//{ExistsFinally}
		public Action getExistsFinallyAction_0_0_4_0() { return cExistsFinallyAction_0_0_4_0; }

		//"EF"
		public Keyword getEFKeyword_0_0_4_1() { return cEFKeyword_0_0_4_1; }

		//{ExistsNext} "EX"
		public Group getGroup_0_0_5() { return cGroup_0_0_5; }

		//{ExistsNext}
		public Action getExistsNextAction_0_0_5_0() { return cExistsNextAction_0_0_5_0; }

		//"EX"
		public Keyword getEXKeyword_0_0_5_1() { return cEXKeyword_0_0_5_1; }

		//formula=RuleStart
		public Assignment getFormulaAssignment_0_1() { return cFormulaAssignment_0_1; }

		//RuleStart
		public RuleCall getFormulaRuleStartParserRuleCall_0_1_0() { return cFormulaRuleStartParserRuleCall_0_1_0; }

		//({AllUntil} "A" | {ExistsUntil} "E") "[" left=RuleStart "U" right=RuleStart "]"
		public Group getGroup_1() { return cGroup_1; }

		//{AllUntil} "A" | {ExistsUntil} "E"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{AllUntil} "A"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{AllUntil}
		public Action getAllUntilAction_1_0_0_0() { return cAllUntilAction_1_0_0_0; }

		//"A"
		public Keyword getAKeyword_1_0_0_1() { return cAKeyword_1_0_0_1; }

		//{ExistsUntil} "E"
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{ExistsUntil}
		public Action getExistsUntilAction_1_0_1_0() { return cExistsUntilAction_1_0_1_0; }

		//"E"
		public Keyword getEKeyword_1_0_1_1() { return cEKeyword_1_0_1_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_1() { return cLeftSquareBracketKeyword_1_1; }

		//left=RuleStart
		public Assignment getLeftAssignment_1_2() { return cLeftAssignment_1_2; }

		//RuleStart
		public RuleCall getLeftRuleStartParserRuleCall_1_2_0() { return cLeftRuleStartParserRuleCall_1_2_0; }

		//"U"
		public Keyword getUKeyword_1_3() { return cUKeyword_1_3; }

		//right=RuleStart
		public Assignment getRightAssignment_1_4() { return cRightAssignment_1_4; }

		//RuleStart
		public RuleCall getRightRuleStartParserRuleCall_1_4_0() { return cRightRuleStartParserRuleCall_1_4_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_5() { return cRightSquareBracketKeyword_1_5; }

		//RuleUnaryPropositionalLogic
		public RuleCall getRuleUnaryPropositionalLogicParserRuleCall_2() { return cRuleUnaryPropositionalLogicParserRuleCall_2; }
	}
	
	
	private RuleStartElements pRuleStart;
	private RuleSimpleElements pRuleSimple;
	
	private final Grammar grammar;

	private PropositionalLogicXtextGrammarAccess gaPropositionalLogicXtext;

	@Inject
	public CtlXtextGrammarAccess(GrammarProvider grammarProvider,
		PropositionalLogicXtextGrammarAccess gaPropositionalLogicXtext) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaPropositionalLogicXtext = gaPropositionalLogicXtext;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("transformation.ctllang2ctl.CtlXtext".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public PropositionalLogicXtextGrammarAccess getPropositionalLogicXtextGrammarAccess() {
		return gaPropositionalLogicXtext;
	}

	
	//// overwritten to include "start" rule. 
	//
	//// Without this overwrite grammar would use only RuleSimple and 
	//
	//// wouldn't be able to parse formulas containing "->", "<->", etc.
	//
	//RuleStart returns Formula:
	//	RuleArrow;
	public RuleStartElements getRuleStartAccess() {
		return (pRuleStart != null) ? pRuleStart : (pRuleStart = new RuleStartElements());
	}
	
	public ParserRule getRuleStartRule() {
		return getRuleStartAccess().getRule();
	}

	////	overwritten rule from propositionallogic to add CTL specific formulas
	//
	//RuleSimple returns Formula:
	//	({AllGlobally} "AG" | {AllFinally} "AF" | {AllNext} "AX" | {ExistsGlobally} "EG" | {ExistsFinally} "EF" | {ExistsNext}
	//	"EX") formula=RuleStart | ({AllUntil} "A" | {ExistsUntil} "E") "[" left=RuleStart "U" right=RuleStart "]" |
	//	RuleUnaryPropositionalLogic;
	public RuleSimpleElements getRuleSimpleAccess() {
		return (pRuleSimple != null) ? pRuleSimple : (pRuleSimple = new RuleSimpleElements());
	}
	
	public ParserRule getRuleSimpleRule() {
		return getRuleSimpleAccess().getRule();
	}

	//RuleArrow returns Formula:
	//	RuleDisjunction (({Implication.left=current} "->" | {Equivalence.left=current} "<->") right=RuleDisjunction)*;
	public PropositionalLogicXtextGrammarAccess.RuleArrowElements getRuleArrowAccess() {
		return gaPropositionalLogicXtext.getRuleArrowAccess();
	}
	
	public ParserRule getRuleArrowRule() {
		return getRuleArrowAccess().getRule();
	}

	//RuleDisjunction returns Formula:
	//	RuleConjunction ({Or.left=current} "|" right=RuleConjunction)*;
	public PropositionalLogicXtextGrammarAccess.RuleDisjunctionElements getRuleDisjunctionAccess() {
		return gaPropositionalLogicXtext.getRuleDisjunctionAccess();
	}
	
	public ParserRule getRuleDisjunctionRule() {
		return getRuleDisjunctionAccess().getRule();
	}

	//RuleConjunction returns Formula:
	//	RuleSimple ({And.left=current} "&" right=RuleSimple)*;
	public PropositionalLogicXtextGrammarAccess.RuleConjunctionElements getRuleConjunctionAccess() {
		return gaPropositionalLogicXtext.getRuleConjunctionAccess();
	}
	
	public ParserRule getRuleConjunctionRule() {
		return getRuleConjunctionAccess().getRule();
	}

	//RuleUnaryPropositionalLogic returns Formula:
	//	{Not} "!" formula=RuleStart | RuleAtomic;
	public PropositionalLogicXtextGrammarAccess.RuleUnaryPropositionalLogicElements getRuleUnaryPropositionalLogicAccess() {
		return gaPropositionalLogicXtext.getRuleUnaryPropositionalLogicAccess();
	}
	
	public ParserRule getRuleUnaryPropositionalLogicRule() {
		return getRuleUnaryPropositionalLogicAccess().getRule();
	}

	//RuleAtomic returns Formula:
	//	"(" RuleStart ")" | {RuleVariableUse} variable=ID | {True} "true" | {False} "false";
	public PropositionalLogicXtextGrammarAccess.RuleAtomicElements getRuleAtomicAccess() {
		return gaPropositionalLogicXtext.getRuleAtomicAccess();
	}
	
	public ParserRule getRuleAtomicRule() {
		return getRuleAtomicAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaPropositionalLogicXtext.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaPropositionalLogicXtext.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaPropositionalLogicXtext.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaPropositionalLogicXtext.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaPropositionalLogicXtext.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaPropositionalLogicXtext.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaPropositionalLogicXtext.getANY_OTHERRule();
	} 
}
