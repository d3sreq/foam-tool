/*
* generated by Xtext
*/
package transformation.ctllang2ctl.parseTreeConstruction;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.parsetree.reconstr.IEObjectConsumer;

import transformation.ctllang2ctl.services.CtlXtextGrammarAccess;

import com.google.inject.Inject;

@SuppressWarnings("all")
public class CtlXtextParsetreeConstructor extends org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor {
		
	@Inject
	private CtlXtextGrammarAccess grammarAccess;
	
	@Override
	protected AbstractToken getRootToken(IEObjectConsumer inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IEObjectConsumer inst) {
		super(inst);
	}
	
	@Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleStart_RuleArrowParserRuleCall(this, this, 0, inst);
			case 1: return new RuleSimple_Alternatives(this, this, 1, inst);
			case 2: return new RuleArrow_Group(this, this, 2, inst);
			case 3: return new RuleDisjunction_Group(this, this, 3, inst);
			case 4: return new RuleConjunction_Group(this, this, 4, inst);
			case 5: return new RuleUnaryPropositionalLogic_Alternatives(this, this, 5, inst);
			case 6: return new RuleAtomic_Alternatives(this, this, 6, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule RuleStart ****************
 *
 * // overwritten to include "start" rule. 
 * 
 * // Without this overwrite grammar would use only RuleSimple and 
 * 
 * // wouldn't be able to parse formulas containing "->", "<->", etc.
 * 
 * RuleStart returns Formula:
 * 	RuleArrow;
 *
 **/

// RuleArrow
protected class RuleStart_RuleArrowParserRuleCall extends RuleCallToken {
	
	public RuleStart_RuleArrowParserRuleCall(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getRuleStartAccess().getRuleArrowParserRuleCall();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleArrow_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRuleSimpleAccess().getAllFinallyAction_0_0_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleSimpleAccess().getAllGloballyAction_0_0_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleSimpleAccess().getAllNextAction_0_0_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleSimpleAccess().getAllUntilAction_1_0_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleConjunctionAccess().getAndLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleArrowAccess().getEquivalenceLeftAction_1_0_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleSimpleAccess().getExistsFinallyAction_0_0_4_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleSimpleAccess().getExistsGloballyAction_0_0_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleSimpleAccess().getExistsNextAction_0_0_5_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleSimpleAccess().getExistsUntilAction_1_0_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleAtomicAccess().getFalseAction_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleArrowAccess().getImplicationLeftAction_1_0_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleUnaryPropositionalLogicAccess().getNotAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleDisjunctionAccess().getOrLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleAtomicAccess().getRuleVariableUseAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleAtomicAccess().getTrueAction_2_0().getType().getClassifier())
			return null;
		if(checkForRecursion(RuleArrow_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

/************ end Rule RuleStart ****************/


/************ begin Rule RuleSimple ****************
 *
 * //	overwritten rule from propositionallogic to add CTL specific formulas
 * 
 * RuleSimple returns Formula:
 * 	({AllGlobally} "AG" | {AllFinally} "AF" | {AllNext} "AX" | {ExistsGlobally} "EG" | {ExistsFinally} "EF" | {ExistsNext}
 * 	"EX") formula=RuleStart | ({AllUntil} "A" | {ExistsUntil} "E") "[" left=RuleStart "U" right=RuleStart "]" |
 * 	RuleUnaryPropositionalLogic;
 *
 **/

// ({AllGlobally} "AG" | {AllFinally} "AF" | {AllNext} "AX" | {ExistsGlobally} "EG" | {ExistsFinally} "EF" | {ExistsNext}
// "EX") formula=RuleStart | ({AllUntil} "A" | {ExistsUntil} "E") "[" left=RuleStart "U" right=RuleStart "]" |
// RuleUnaryPropositionalLogic
protected class RuleSimple_Alternatives extends AlternativesToken {

	public RuleSimple_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getRuleSimpleAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleSimple_Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new RuleSimple_Group_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new RuleSimple_RuleUnaryPropositionalLogicParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRuleSimpleAccess().getAllFinallyAction_0_0_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleSimpleAccess().getAllGloballyAction_0_0_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleSimpleAccess().getAllNextAction_0_0_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleSimpleAccess().getAllUntilAction_1_0_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleConjunctionAccess().getAndLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleArrowAccess().getEquivalenceLeftAction_1_0_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleSimpleAccess().getExistsFinallyAction_0_0_4_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleSimpleAccess().getExistsGloballyAction_0_0_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleSimpleAccess().getExistsNextAction_0_0_5_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleSimpleAccess().getExistsUntilAction_1_0_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleAtomicAccess().getFalseAction_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleArrowAccess().getImplicationLeftAction_1_0_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleUnaryPropositionalLogicAccess().getNotAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleDisjunctionAccess().getOrLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleAtomicAccess().getRuleVariableUseAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleAtomicAccess().getTrueAction_2_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ({AllGlobally} "AG" | {AllFinally} "AF" | {AllNext} "AX" | {ExistsGlobally} "EG" | {ExistsFinally} "EF" | {ExistsNext}
// "EX") formula=RuleStart
protected class RuleSimple_Group_0 extends GroupToken {
	
	public RuleSimple_Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRuleSimpleAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleSimple_FormulaAssignment_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRuleSimpleAccess().getAllFinallyAction_0_0_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleSimpleAccess().getAllGloballyAction_0_0_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleSimpleAccess().getAllNextAction_0_0_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleSimpleAccess().getExistsFinallyAction_0_0_4_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleSimpleAccess().getExistsGloballyAction_0_0_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleSimpleAccess().getExistsNextAction_0_0_5_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {AllGlobally} "AG" | {AllFinally} "AF" | {AllNext} "AX" | {ExistsGlobally} "EG" | {ExistsFinally} "EF" | {ExistsNext}
// "EX"
protected class RuleSimple_Alternatives_0_0 extends AlternativesToken {

	public RuleSimple_Alternatives_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getRuleSimpleAccess().getAlternatives_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleSimple_Group_0_0_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new RuleSimple_Group_0_0_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new RuleSimple_Group_0_0_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new RuleSimple_Group_0_0_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new RuleSimple_Group_0_0_4(lastRuleCallOrigin, this, 4, inst);
			case 5: return new RuleSimple_Group_0_0_5(lastRuleCallOrigin, this, 5, inst);
			default: return null;
		}	
	}

}

// {AllGlobally} "AG"
protected class RuleSimple_Group_0_0_0 extends GroupToken {
	
	public RuleSimple_Group_0_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRuleSimpleAccess().getGroup_0_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleSimple_AGKeyword_0_0_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRuleSimpleAccess().getAllGloballyAction_0_0_0_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {AllGlobally}
protected class RuleSimple_AllGloballyAction_0_0_0_0 extends ActionToken  {

	public RuleSimple_AllGloballyAction_0_0_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getRuleSimpleAccess().getAllGloballyAction_0_0_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "AG"
protected class RuleSimple_AGKeyword_0_0_0_1 extends KeywordToken  {
	
	public RuleSimple_AGKeyword_0_0_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRuleSimpleAccess().getAGKeyword_0_0_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleSimple_AllGloballyAction_0_0_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// {AllFinally} "AF"
protected class RuleSimple_Group_0_0_1 extends GroupToken {
	
	public RuleSimple_Group_0_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRuleSimpleAccess().getGroup_0_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleSimple_AFKeyword_0_0_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRuleSimpleAccess().getAllFinallyAction_0_0_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {AllFinally}
protected class RuleSimple_AllFinallyAction_0_0_1_0 extends ActionToken  {

	public RuleSimple_AllFinallyAction_0_0_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getRuleSimpleAccess().getAllFinallyAction_0_0_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "AF"
protected class RuleSimple_AFKeyword_0_0_1_1 extends KeywordToken  {
	
	public RuleSimple_AFKeyword_0_0_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRuleSimpleAccess().getAFKeyword_0_0_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleSimple_AllFinallyAction_0_0_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// {AllNext} "AX"
protected class RuleSimple_Group_0_0_2 extends GroupToken {
	
	public RuleSimple_Group_0_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRuleSimpleAccess().getGroup_0_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleSimple_AXKeyword_0_0_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRuleSimpleAccess().getAllNextAction_0_0_2_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {AllNext}
protected class RuleSimple_AllNextAction_0_0_2_0 extends ActionToken  {

	public RuleSimple_AllNextAction_0_0_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getRuleSimpleAccess().getAllNextAction_0_0_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "AX"
protected class RuleSimple_AXKeyword_0_0_2_1 extends KeywordToken  {
	
	public RuleSimple_AXKeyword_0_0_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRuleSimpleAccess().getAXKeyword_0_0_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleSimple_AllNextAction_0_0_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// {ExistsGlobally} "EG"
protected class RuleSimple_Group_0_0_3 extends GroupToken {
	
	public RuleSimple_Group_0_0_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRuleSimpleAccess().getGroup_0_0_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleSimple_EGKeyword_0_0_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRuleSimpleAccess().getExistsGloballyAction_0_0_3_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {ExistsGlobally}
protected class RuleSimple_ExistsGloballyAction_0_0_3_0 extends ActionToken  {

	public RuleSimple_ExistsGloballyAction_0_0_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getRuleSimpleAccess().getExistsGloballyAction_0_0_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "EG"
protected class RuleSimple_EGKeyword_0_0_3_1 extends KeywordToken  {
	
	public RuleSimple_EGKeyword_0_0_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRuleSimpleAccess().getEGKeyword_0_0_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleSimple_ExistsGloballyAction_0_0_3_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// {ExistsFinally} "EF"
protected class RuleSimple_Group_0_0_4 extends GroupToken {
	
	public RuleSimple_Group_0_0_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRuleSimpleAccess().getGroup_0_0_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleSimple_EFKeyword_0_0_4_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRuleSimpleAccess().getExistsFinallyAction_0_0_4_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {ExistsFinally}
protected class RuleSimple_ExistsFinallyAction_0_0_4_0 extends ActionToken  {

	public RuleSimple_ExistsFinallyAction_0_0_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getRuleSimpleAccess().getExistsFinallyAction_0_0_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "EF"
protected class RuleSimple_EFKeyword_0_0_4_1 extends KeywordToken  {
	
	public RuleSimple_EFKeyword_0_0_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRuleSimpleAccess().getEFKeyword_0_0_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleSimple_ExistsFinallyAction_0_0_4_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// {ExistsNext} "EX"
protected class RuleSimple_Group_0_0_5 extends GroupToken {
	
	public RuleSimple_Group_0_0_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRuleSimpleAccess().getGroup_0_0_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleSimple_EXKeyword_0_0_5_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRuleSimpleAccess().getExistsNextAction_0_0_5_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {ExistsNext}
protected class RuleSimple_ExistsNextAction_0_0_5_0 extends ActionToken  {

	public RuleSimple_ExistsNextAction_0_0_5_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getRuleSimpleAccess().getExistsNextAction_0_0_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "EX"
protected class RuleSimple_EXKeyword_0_0_5_1 extends KeywordToken  {
	
	public RuleSimple_EXKeyword_0_0_5_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRuleSimpleAccess().getEXKeyword_0_0_5_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleSimple_ExistsNextAction_0_0_5_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



// formula=RuleStart
protected class RuleSimple_FormulaAssignment_0_1 extends AssignmentToken  {
	
	public RuleSimple_FormulaAssignment_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRuleSimpleAccess().getFormulaAssignment_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleStart_RuleArrowParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("formula",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("formula");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRuleStartRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getRuleSimpleAccess().getFormulaRuleStartParserRuleCall_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new RuleSimple_Alternatives_0_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ({AllUntil} "A" | {ExistsUntil} "E") "[" left=RuleStart "U" right=RuleStart "]"
protected class RuleSimple_Group_1 extends GroupToken {
	
	public RuleSimple_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRuleSimpleAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleSimple_RightSquareBracketKeyword_1_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRuleSimpleAccess().getAllUntilAction_1_0_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleSimpleAccess().getExistsUntilAction_1_0_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {AllUntil} "A" | {ExistsUntil} "E"
protected class RuleSimple_Alternatives_1_0 extends AlternativesToken {

	public RuleSimple_Alternatives_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getRuleSimpleAccess().getAlternatives_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleSimple_Group_1_0_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new RuleSimple_Group_1_0_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// {AllUntil} "A"
protected class RuleSimple_Group_1_0_0 extends GroupToken {
	
	public RuleSimple_Group_1_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRuleSimpleAccess().getGroup_1_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleSimple_AKeyword_1_0_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRuleSimpleAccess().getAllUntilAction_1_0_0_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {AllUntil}
protected class RuleSimple_AllUntilAction_1_0_0_0 extends ActionToken  {

	public RuleSimple_AllUntilAction_1_0_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getRuleSimpleAccess().getAllUntilAction_1_0_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "A"
protected class RuleSimple_AKeyword_1_0_0_1 extends KeywordToken  {
	
	public RuleSimple_AKeyword_1_0_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRuleSimpleAccess().getAKeyword_1_0_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleSimple_AllUntilAction_1_0_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// {ExistsUntil} "E"
protected class RuleSimple_Group_1_0_1 extends GroupToken {
	
	public RuleSimple_Group_1_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRuleSimpleAccess().getGroup_1_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleSimple_EKeyword_1_0_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRuleSimpleAccess().getExistsUntilAction_1_0_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {ExistsUntil}
protected class RuleSimple_ExistsUntilAction_1_0_1_0 extends ActionToken  {

	public RuleSimple_ExistsUntilAction_1_0_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getRuleSimpleAccess().getExistsUntilAction_1_0_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "E"
protected class RuleSimple_EKeyword_1_0_1_1 extends KeywordToken  {
	
	public RuleSimple_EKeyword_1_0_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRuleSimpleAccess().getEKeyword_1_0_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleSimple_ExistsUntilAction_1_0_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



// "["
protected class RuleSimple_LeftSquareBracketKeyword_1_1 extends KeywordToken  {
	
	public RuleSimple_LeftSquareBracketKeyword_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRuleSimpleAccess().getLeftSquareBracketKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleSimple_Alternatives_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// left=RuleStart
protected class RuleSimple_LeftAssignment_1_2 extends AssignmentToken  {
	
	public RuleSimple_LeftAssignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRuleSimpleAccess().getLeftAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleStart_RuleArrowParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("left",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("left");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRuleStartRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getRuleSimpleAccess().getLeftRuleStartParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new RuleSimple_LeftSquareBracketKeyword_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "U"
protected class RuleSimple_UKeyword_1_3 extends KeywordToken  {
	
	public RuleSimple_UKeyword_1_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRuleSimpleAccess().getUKeyword_1_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleSimple_LeftAssignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// right=RuleStart
protected class RuleSimple_RightAssignment_1_4 extends AssignmentToken  {
	
	public RuleSimple_RightAssignment_1_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRuleSimpleAccess().getRightAssignment_1_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleStart_RuleArrowParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("right",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("right");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRuleStartRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getRuleSimpleAccess().getRightRuleStartParserRuleCall_1_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new RuleSimple_UKeyword_1_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "]"
protected class RuleSimple_RightSquareBracketKeyword_1_5 extends KeywordToken  {
	
	public RuleSimple_RightSquareBracketKeyword_1_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRuleSimpleAccess().getRightSquareBracketKeyword_1_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleSimple_RightAssignment_1_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// RuleUnaryPropositionalLogic
protected class RuleSimple_RuleUnaryPropositionalLogicParserRuleCall_2 extends RuleCallToken {
	
	public RuleSimple_RuleUnaryPropositionalLogicParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getRuleSimpleAccess().getRuleUnaryPropositionalLogicParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleUnaryPropositionalLogic_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(RuleUnaryPropositionalLogic_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule RuleSimple ****************/


/************ begin Rule RuleArrow ****************
 *
 * RuleArrow returns Formula:
 * 	RuleDisjunction (({Implication.left=current} "->" | {Equivalence.left=current} "<->") right=RuleDisjunction)*;
 *
 **/

// RuleDisjunction (({Implication.left=current} "->" | {Equivalence.left=current} "<->") right=RuleDisjunction)*
protected class RuleArrow_Group extends GroupToken {
	
	public RuleArrow_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRuleArrowAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleArrow_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new RuleArrow_RuleDisjunctionParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRuleSimpleAccess().getAllFinallyAction_0_0_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleSimpleAccess().getAllGloballyAction_0_0_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleSimpleAccess().getAllNextAction_0_0_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleSimpleAccess().getAllUntilAction_1_0_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleConjunctionAccess().getAndLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleArrowAccess().getEquivalenceLeftAction_1_0_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleSimpleAccess().getExistsFinallyAction_0_0_4_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleSimpleAccess().getExistsGloballyAction_0_0_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleSimpleAccess().getExistsNextAction_0_0_5_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleSimpleAccess().getExistsUntilAction_1_0_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleAtomicAccess().getFalseAction_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleArrowAccess().getImplicationLeftAction_1_0_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleUnaryPropositionalLogicAccess().getNotAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleDisjunctionAccess().getOrLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleAtomicAccess().getRuleVariableUseAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleAtomicAccess().getTrueAction_2_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// RuleDisjunction
protected class RuleArrow_RuleDisjunctionParserRuleCall_0 extends RuleCallToken {
	
	public RuleArrow_RuleDisjunctionParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getRuleArrowAccess().getRuleDisjunctionParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleDisjunction_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(RuleDisjunction_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// (({Implication.left=current} "->" | {Equivalence.left=current} "<->") right=RuleDisjunction)*
protected class RuleArrow_Group_1 extends GroupToken {
	
	public RuleArrow_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRuleArrowAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleArrow_RightAssignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRuleArrowAccess().getEquivalenceLeftAction_1_0_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleArrowAccess().getImplicationLeftAction_1_0_0_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {Implication.left=current} "->" | {Equivalence.left=current} "<->"
protected class RuleArrow_Alternatives_1_0 extends AlternativesToken {

	public RuleArrow_Alternatives_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getRuleArrowAccess().getAlternatives_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleArrow_Group_1_0_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new RuleArrow_Group_1_0_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// {Implication.left=current} "->"
protected class RuleArrow_Group_1_0_0 extends GroupToken {
	
	public RuleArrow_Group_1_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRuleArrowAccess().getGroup_1_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleArrow_HyphenMinusGreaterThanSignKeyword_1_0_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRuleArrowAccess().getImplicationLeftAction_1_0_0_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {Implication.left=current}
protected class RuleArrow_ImplicationLeftAction_1_0_0_0 extends ActionToken  {

	public RuleArrow_ImplicationLeftAction_1_0_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getRuleArrowAccess().getImplicationLeftAction_1_0_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleArrow_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new RuleArrow_RuleDisjunctionParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("left", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("left")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// "->"
protected class RuleArrow_HyphenMinusGreaterThanSignKeyword_1_0_0_1 extends KeywordToken  {
	
	public RuleArrow_HyphenMinusGreaterThanSignKeyword_1_0_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRuleArrowAccess().getHyphenMinusGreaterThanSignKeyword_1_0_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleArrow_ImplicationLeftAction_1_0_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// {Equivalence.left=current} "<->"
protected class RuleArrow_Group_1_0_1 extends GroupToken {
	
	public RuleArrow_Group_1_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRuleArrowAccess().getGroup_1_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleArrow_LessThanSignHyphenMinusGreaterThanSignKeyword_1_0_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRuleArrowAccess().getEquivalenceLeftAction_1_0_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {Equivalence.left=current}
protected class RuleArrow_EquivalenceLeftAction_1_0_1_0 extends ActionToken  {

	public RuleArrow_EquivalenceLeftAction_1_0_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getRuleArrowAccess().getEquivalenceLeftAction_1_0_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleArrow_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new RuleArrow_RuleDisjunctionParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("left", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("left")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// "<->"
protected class RuleArrow_LessThanSignHyphenMinusGreaterThanSignKeyword_1_0_1_1 extends KeywordToken  {
	
	public RuleArrow_LessThanSignHyphenMinusGreaterThanSignKeyword_1_0_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRuleArrowAccess().getLessThanSignHyphenMinusGreaterThanSignKeyword_1_0_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleArrow_EquivalenceLeftAction_1_0_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



// right=RuleDisjunction
protected class RuleArrow_RightAssignment_1_1 extends AssignmentToken  {
	
	public RuleArrow_RightAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRuleArrowAccess().getRightAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleDisjunction_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("right",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("right");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRuleDisjunctionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getRuleArrowAccess().getRightRuleDisjunctionParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new RuleArrow_Alternatives_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule RuleArrow ****************/


/************ begin Rule RuleDisjunction ****************
 *
 * RuleDisjunction returns Formula:
 * 	RuleConjunction ({Or.left=current} "|" right=RuleConjunction)*;
 *
 **/

// RuleConjunction ({Or.left=current} "|" right=RuleConjunction)*
protected class RuleDisjunction_Group extends GroupToken {
	
	public RuleDisjunction_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRuleDisjunctionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleDisjunction_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new RuleDisjunction_RuleConjunctionParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRuleSimpleAccess().getAllFinallyAction_0_0_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleSimpleAccess().getAllGloballyAction_0_0_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleSimpleAccess().getAllNextAction_0_0_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleSimpleAccess().getAllUntilAction_1_0_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleConjunctionAccess().getAndLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleArrowAccess().getEquivalenceLeftAction_1_0_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleSimpleAccess().getExistsFinallyAction_0_0_4_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleSimpleAccess().getExistsGloballyAction_0_0_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleSimpleAccess().getExistsNextAction_0_0_5_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleSimpleAccess().getExistsUntilAction_1_0_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleAtomicAccess().getFalseAction_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleArrowAccess().getImplicationLeftAction_1_0_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleUnaryPropositionalLogicAccess().getNotAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleDisjunctionAccess().getOrLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleAtomicAccess().getRuleVariableUseAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleAtomicAccess().getTrueAction_2_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// RuleConjunction
protected class RuleDisjunction_RuleConjunctionParserRuleCall_0 extends RuleCallToken {
	
	public RuleDisjunction_RuleConjunctionParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getRuleDisjunctionAccess().getRuleConjunctionParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleConjunction_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(RuleConjunction_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({Or.left=current} "|" right=RuleConjunction)*
protected class RuleDisjunction_Group_1 extends GroupToken {
	
	public RuleDisjunction_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRuleDisjunctionAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleDisjunction_RightAssignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRuleDisjunctionAccess().getOrLeftAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {Or.left=current}
protected class RuleDisjunction_OrLeftAction_1_0 extends ActionToken  {

	public RuleDisjunction_OrLeftAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getRuleDisjunctionAccess().getOrLeftAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleDisjunction_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new RuleDisjunction_RuleConjunctionParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("left", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("left")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// "|"
protected class RuleDisjunction_VerticalLineKeyword_1_1 extends KeywordToken  {
	
	public RuleDisjunction_VerticalLineKeyword_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRuleDisjunctionAccess().getVerticalLineKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleDisjunction_OrLeftAction_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// right=RuleConjunction
protected class RuleDisjunction_RightAssignment_1_2 extends AssignmentToken  {
	
	public RuleDisjunction_RightAssignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRuleDisjunctionAccess().getRightAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleConjunction_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("right",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("right");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRuleConjunctionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getRuleDisjunctionAccess().getRightRuleConjunctionParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new RuleDisjunction_VerticalLineKeyword_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule RuleDisjunction ****************/


/************ begin Rule RuleConjunction ****************
 *
 * RuleConjunction returns Formula:
 * 	RuleSimple ({And.left=current} "&" right=RuleSimple)*;
 *
 **/

// RuleSimple ({And.left=current} "&" right=RuleSimple)*
protected class RuleConjunction_Group extends GroupToken {
	
	public RuleConjunction_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRuleConjunctionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleConjunction_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new RuleConjunction_RuleSimpleParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRuleSimpleAccess().getAllFinallyAction_0_0_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleSimpleAccess().getAllGloballyAction_0_0_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleSimpleAccess().getAllNextAction_0_0_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleSimpleAccess().getAllUntilAction_1_0_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleConjunctionAccess().getAndLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleArrowAccess().getEquivalenceLeftAction_1_0_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleSimpleAccess().getExistsFinallyAction_0_0_4_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleSimpleAccess().getExistsGloballyAction_0_0_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleSimpleAccess().getExistsNextAction_0_0_5_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleSimpleAccess().getExistsUntilAction_1_0_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleAtomicAccess().getFalseAction_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleArrowAccess().getImplicationLeftAction_1_0_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleUnaryPropositionalLogicAccess().getNotAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleDisjunctionAccess().getOrLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleAtomicAccess().getRuleVariableUseAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleAtomicAccess().getTrueAction_2_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// RuleSimple
protected class RuleConjunction_RuleSimpleParserRuleCall_0 extends RuleCallToken {
	
	public RuleConjunction_RuleSimpleParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getRuleConjunctionAccess().getRuleSimpleParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleSimple_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(RuleSimple_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({And.left=current} "&" right=RuleSimple)*
protected class RuleConjunction_Group_1 extends GroupToken {
	
	public RuleConjunction_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRuleConjunctionAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleConjunction_RightAssignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRuleConjunctionAccess().getAndLeftAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {And.left=current}
protected class RuleConjunction_AndLeftAction_1_0 extends ActionToken  {

	public RuleConjunction_AndLeftAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getRuleConjunctionAccess().getAndLeftAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleConjunction_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new RuleConjunction_RuleSimpleParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("left", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("left")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// "&"
protected class RuleConjunction_AmpersandKeyword_1_1 extends KeywordToken  {
	
	public RuleConjunction_AmpersandKeyword_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRuleConjunctionAccess().getAmpersandKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleConjunction_AndLeftAction_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// right=RuleSimple
protected class RuleConjunction_RightAssignment_1_2 extends AssignmentToken  {
	
	public RuleConjunction_RightAssignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRuleConjunctionAccess().getRightAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleSimple_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("right",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("right");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRuleSimpleRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getRuleConjunctionAccess().getRightRuleSimpleParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new RuleConjunction_AmpersandKeyword_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule RuleConjunction ****************/


/************ begin Rule RuleUnaryPropositionalLogic ****************
 *
 * RuleUnaryPropositionalLogic returns Formula:
 * 	{Not} "!" formula=RuleStart | RuleAtomic;
 *
 **/

// {Not} "!" formula=RuleStart | RuleAtomic
protected class RuleUnaryPropositionalLogic_Alternatives extends AlternativesToken {

	public RuleUnaryPropositionalLogic_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getRuleUnaryPropositionalLogicAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleUnaryPropositionalLogic_Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new RuleUnaryPropositionalLogic_RuleAtomicParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRuleSimpleAccess().getAllFinallyAction_0_0_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleSimpleAccess().getAllGloballyAction_0_0_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleSimpleAccess().getAllNextAction_0_0_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleSimpleAccess().getAllUntilAction_1_0_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleConjunctionAccess().getAndLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleArrowAccess().getEquivalenceLeftAction_1_0_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleSimpleAccess().getExistsFinallyAction_0_0_4_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleSimpleAccess().getExistsGloballyAction_0_0_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleSimpleAccess().getExistsNextAction_0_0_5_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleSimpleAccess().getExistsUntilAction_1_0_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleAtomicAccess().getFalseAction_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleArrowAccess().getImplicationLeftAction_1_0_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleUnaryPropositionalLogicAccess().getNotAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleDisjunctionAccess().getOrLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleAtomicAccess().getRuleVariableUseAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleAtomicAccess().getTrueAction_2_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {Not} "!" formula=RuleStart
protected class RuleUnaryPropositionalLogic_Group_0 extends GroupToken {
	
	public RuleUnaryPropositionalLogic_Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRuleUnaryPropositionalLogicAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleUnaryPropositionalLogic_FormulaAssignment_0_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRuleUnaryPropositionalLogicAccess().getNotAction_0_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {Not}
protected class RuleUnaryPropositionalLogic_NotAction_0_0 extends ActionToken  {

	public RuleUnaryPropositionalLogic_NotAction_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getRuleUnaryPropositionalLogicAccess().getNotAction_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "!"
protected class RuleUnaryPropositionalLogic_ExclamationMarkKeyword_0_1 extends KeywordToken  {
	
	public RuleUnaryPropositionalLogic_ExclamationMarkKeyword_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRuleUnaryPropositionalLogicAccess().getExclamationMarkKeyword_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleUnaryPropositionalLogic_NotAction_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// formula=RuleStart
protected class RuleUnaryPropositionalLogic_FormulaAssignment_0_2 extends AssignmentToken  {
	
	public RuleUnaryPropositionalLogic_FormulaAssignment_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRuleUnaryPropositionalLogicAccess().getFormulaAssignment_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleStart_RuleArrowParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("formula",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("formula");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRuleStartRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getRuleUnaryPropositionalLogicAccess().getFormulaRuleStartParserRuleCall_0_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new RuleUnaryPropositionalLogic_ExclamationMarkKeyword_0_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// RuleAtomic
protected class RuleUnaryPropositionalLogic_RuleAtomicParserRuleCall_1 extends RuleCallToken {
	
	public RuleUnaryPropositionalLogic_RuleAtomicParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getRuleUnaryPropositionalLogicAccess().getRuleAtomicParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleAtomic_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(RuleAtomic_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule RuleUnaryPropositionalLogic ****************/


/************ begin Rule RuleAtomic ****************
 *
 * RuleAtomic returns Formula:
 * 	"(" RuleStart ")" | {RuleVariableUse} variable=ID | {True} "true" | {False} "false";
 *
 **/

// "(" RuleStart ")" | {RuleVariableUse} variable=ID | {True} "true" | {False} "false"
protected class RuleAtomic_Alternatives extends AlternativesToken {

	public RuleAtomic_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getRuleAtomicAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleAtomic_Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new RuleAtomic_Group_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new RuleAtomic_Group_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new RuleAtomic_Group_3(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRuleSimpleAccess().getAllFinallyAction_0_0_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleSimpleAccess().getAllGloballyAction_0_0_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleSimpleAccess().getAllNextAction_0_0_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleSimpleAccess().getAllUntilAction_1_0_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleConjunctionAccess().getAndLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleArrowAccess().getEquivalenceLeftAction_1_0_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleSimpleAccess().getExistsFinallyAction_0_0_4_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleSimpleAccess().getExistsGloballyAction_0_0_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleSimpleAccess().getExistsNextAction_0_0_5_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleSimpleAccess().getExistsUntilAction_1_0_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleAtomicAccess().getFalseAction_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleArrowAccess().getImplicationLeftAction_1_0_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleUnaryPropositionalLogicAccess().getNotAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleDisjunctionAccess().getOrLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleAtomicAccess().getRuleVariableUseAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleAtomicAccess().getTrueAction_2_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "(" RuleStart ")"
protected class RuleAtomic_Group_0 extends GroupToken {
	
	public RuleAtomic_Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRuleAtomicAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleAtomic_RightParenthesisKeyword_0_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "("
protected class RuleAtomic_LeftParenthesisKeyword_0_0 extends KeywordToken  {
	
	public RuleAtomic_LeftParenthesisKeyword_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRuleAtomicAccess().getLeftParenthesisKeyword_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// RuleStart
protected class RuleAtomic_RuleStartParserRuleCall_0_1 extends RuleCallToken {
	
	public RuleAtomic_RuleStartParserRuleCall_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getRuleAtomicAccess().getRuleStartParserRuleCall_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleStart_RuleArrowParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(RuleStart_RuleArrowParserRuleCall.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleAtomic_LeftParenthesisKeyword_0_0(lastRuleCallOrigin, next, actIndex, inst);
			default: return null;
		}	
	}	
}

// ")"
protected class RuleAtomic_RightParenthesisKeyword_0_2 extends KeywordToken  {
	
	public RuleAtomic_RightParenthesisKeyword_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRuleAtomicAccess().getRightParenthesisKeyword_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleAtomic_RuleStartParserRuleCall_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// {RuleVariableUse} variable=ID
protected class RuleAtomic_Group_1 extends GroupToken {
	
	public RuleAtomic_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRuleAtomicAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleAtomic_VariableAssignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRuleAtomicAccess().getRuleVariableUseAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {RuleVariableUse}
protected class RuleAtomic_RuleVariableUseAction_1_0 extends ActionToken  {

	public RuleAtomic_RuleVariableUseAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getRuleAtomicAccess().getRuleVariableUseAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// variable=ID
protected class RuleAtomic_VariableAssignment_1_1 extends AssignmentToken  {
	
	public RuleAtomic_VariableAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRuleAtomicAccess().getVariableAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleAtomic_RuleVariableUseAction_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("variable",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("variable");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getRuleAtomicAccess().getVariableIDTerminalRuleCall_1_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getRuleAtomicAccess().getVariableIDTerminalRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}


// {True} "true"
protected class RuleAtomic_Group_2 extends GroupToken {
	
	public RuleAtomic_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRuleAtomicAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleAtomic_TrueKeyword_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRuleAtomicAccess().getTrueAction_2_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {True}
protected class RuleAtomic_TrueAction_2_0 extends ActionToken  {

	public RuleAtomic_TrueAction_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getRuleAtomicAccess().getTrueAction_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "true"
protected class RuleAtomic_TrueKeyword_2_1 extends KeywordToken  {
	
	public RuleAtomic_TrueKeyword_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRuleAtomicAccess().getTrueKeyword_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleAtomic_TrueAction_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// {False} "false"
protected class RuleAtomic_Group_3 extends GroupToken {
	
	public RuleAtomic_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRuleAtomicAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleAtomic_FalseKeyword_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRuleAtomicAccess().getFalseAction_3_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {False}
protected class RuleAtomic_FalseAction_3_0 extends ActionToken  {

	public RuleAtomic_FalseAction_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getRuleAtomicAccess().getFalseAction_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "false"
protected class RuleAtomic_FalseKeyword_3_1 extends KeywordToken  {
	
	public RuleAtomic_FalseKeyword_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRuleAtomicAccess().getFalseKeyword_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleAtomic_FalseAction_3_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



/************ end Rule RuleAtomic ****************/

}
