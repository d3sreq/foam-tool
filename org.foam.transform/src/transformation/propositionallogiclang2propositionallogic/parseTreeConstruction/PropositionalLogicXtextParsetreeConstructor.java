/*
* generated by Xtext
*/
package transformation.propositionallogiclang2propositionallogic.parseTreeConstruction;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.parsetree.reconstr.IEObjectConsumer;

import transformation.propositionallogiclang2propositionallogic.services.PropositionalLogicXtextGrammarAccess;

import com.google.inject.Inject;

@SuppressWarnings("all")
public class PropositionalLogicXtextParsetreeConstructor extends org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor {
		
	@Inject
	private PropositionalLogicXtextGrammarAccess grammarAccess;
	
	@Override
	protected AbstractToken getRootToken(IEObjectConsumer inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IEObjectConsumer inst) {
		super(inst);
	}
	
	@Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleStart_RuleArrowParserRuleCall(this, this, 0, inst);
			case 1: return new RuleArrow_Group(this, this, 1, inst);
			case 2: return new RuleDisjunction_Group(this, this, 2, inst);
			case 3: return new RuleConjunction_Group(this, this, 3, inst);
			case 4: return new RuleSimple_RuleUnaryPropositionalLogicParserRuleCall(this, this, 4, inst);
			case 5: return new RuleUnaryPropositionalLogic_Alternatives(this, this, 5, inst);
			case 6: return new RuleAtomic_Alternatives(this, this, 6, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule RuleStart ****************
 *
 * RuleStart returns Formula:
 * 	RuleArrow;
 *
 **/

// RuleArrow
protected class RuleStart_RuleArrowParserRuleCall extends RuleCallToken {
	
	public RuleStart_RuleArrowParserRuleCall(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getRuleStartAccess().getRuleArrowParserRuleCall();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleArrow_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRuleConjunctionAccess().getAndLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleArrowAccess().getEquivalenceLeftAction_1_0_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleAtomicAccess().getFalseAction_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleArrowAccess().getImplicationLeftAction_1_0_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleUnaryPropositionalLogicAccess().getNotAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleDisjunctionAccess().getOrLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleAtomicAccess().getRuleVariableUseAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleAtomicAccess().getTrueAction_2_0().getType().getClassifier())
			return null;
		if(checkForRecursion(RuleArrow_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

/************ end Rule RuleStart ****************/


/************ begin Rule RuleArrow ****************
 *
 * RuleArrow returns Formula:
 * 	RuleDisjunction (({Implication.left=current} "->" | {Equivalence.left=current} "<->") right=RuleDisjunction)*;
 *
 **/

// RuleDisjunction (({Implication.left=current} "->" | {Equivalence.left=current} "<->") right=RuleDisjunction)*
protected class RuleArrow_Group extends GroupToken {
	
	public RuleArrow_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRuleArrowAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleArrow_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new RuleArrow_RuleDisjunctionParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRuleConjunctionAccess().getAndLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleArrowAccess().getEquivalenceLeftAction_1_0_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleAtomicAccess().getFalseAction_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleArrowAccess().getImplicationLeftAction_1_0_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleUnaryPropositionalLogicAccess().getNotAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleDisjunctionAccess().getOrLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleAtomicAccess().getRuleVariableUseAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleAtomicAccess().getTrueAction_2_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// RuleDisjunction
protected class RuleArrow_RuleDisjunctionParserRuleCall_0 extends RuleCallToken {
	
	public RuleArrow_RuleDisjunctionParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getRuleArrowAccess().getRuleDisjunctionParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleDisjunction_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(RuleDisjunction_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// (({Implication.left=current} "->" | {Equivalence.left=current} "<->") right=RuleDisjunction)*
protected class RuleArrow_Group_1 extends GroupToken {
	
	public RuleArrow_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRuleArrowAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleArrow_RightAssignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRuleArrowAccess().getEquivalenceLeftAction_1_0_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleArrowAccess().getImplicationLeftAction_1_0_0_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {Implication.left=current} "->" | {Equivalence.left=current} "<->"
protected class RuleArrow_Alternatives_1_0 extends AlternativesToken {

	public RuleArrow_Alternatives_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getRuleArrowAccess().getAlternatives_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleArrow_Group_1_0_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new RuleArrow_Group_1_0_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// {Implication.left=current} "->"
protected class RuleArrow_Group_1_0_0 extends GroupToken {
	
	public RuleArrow_Group_1_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRuleArrowAccess().getGroup_1_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleArrow_HyphenMinusGreaterThanSignKeyword_1_0_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRuleArrowAccess().getImplicationLeftAction_1_0_0_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {Implication.left=current}
protected class RuleArrow_ImplicationLeftAction_1_0_0_0 extends ActionToken  {

	public RuleArrow_ImplicationLeftAction_1_0_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getRuleArrowAccess().getImplicationLeftAction_1_0_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleArrow_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new RuleArrow_RuleDisjunctionParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("left", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("left")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// "->"
protected class RuleArrow_HyphenMinusGreaterThanSignKeyword_1_0_0_1 extends KeywordToken  {
	
	public RuleArrow_HyphenMinusGreaterThanSignKeyword_1_0_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRuleArrowAccess().getHyphenMinusGreaterThanSignKeyword_1_0_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleArrow_ImplicationLeftAction_1_0_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// {Equivalence.left=current} "<->"
protected class RuleArrow_Group_1_0_1 extends GroupToken {
	
	public RuleArrow_Group_1_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRuleArrowAccess().getGroup_1_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleArrow_LessThanSignHyphenMinusGreaterThanSignKeyword_1_0_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRuleArrowAccess().getEquivalenceLeftAction_1_0_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {Equivalence.left=current}
protected class RuleArrow_EquivalenceLeftAction_1_0_1_0 extends ActionToken  {

	public RuleArrow_EquivalenceLeftAction_1_0_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getRuleArrowAccess().getEquivalenceLeftAction_1_0_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleArrow_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new RuleArrow_RuleDisjunctionParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("left", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("left")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// "<->"
protected class RuleArrow_LessThanSignHyphenMinusGreaterThanSignKeyword_1_0_1_1 extends KeywordToken  {
	
	public RuleArrow_LessThanSignHyphenMinusGreaterThanSignKeyword_1_0_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRuleArrowAccess().getLessThanSignHyphenMinusGreaterThanSignKeyword_1_0_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleArrow_EquivalenceLeftAction_1_0_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



// right=RuleDisjunction
protected class RuleArrow_RightAssignment_1_1 extends AssignmentToken  {
	
	public RuleArrow_RightAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRuleArrowAccess().getRightAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleDisjunction_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("right",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("right");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRuleDisjunctionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getRuleArrowAccess().getRightRuleDisjunctionParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new RuleArrow_Alternatives_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule RuleArrow ****************/


/************ begin Rule RuleDisjunction ****************
 *
 * RuleDisjunction returns Formula:
 * 	RuleConjunction ({Or.left=current} "|" right=RuleConjunction)*;
 *
 **/

// RuleConjunction ({Or.left=current} "|" right=RuleConjunction)*
protected class RuleDisjunction_Group extends GroupToken {
	
	public RuleDisjunction_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRuleDisjunctionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleDisjunction_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new RuleDisjunction_RuleConjunctionParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRuleConjunctionAccess().getAndLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleArrowAccess().getEquivalenceLeftAction_1_0_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleAtomicAccess().getFalseAction_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleArrowAccess().getImplicationLeftAction_1_0_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleUnaryPropositionalLogicAccess().getNotAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleDisjunctionAccess().getOrLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleAtomicAccess().getRuleVariableUseAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleAtomicAccess().getTrueAction_2_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// RuleConjunction
protected class RuleDisjunction_RuleConjunctionParserRuleCall_0 extends RuleCallToken {
	
	public RuleDisjunction_RuleConjunctionParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getRuleDisjunctionAccess().getRuleConjunctionParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleConjunction_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(RuleConjunction_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({Or.left=current} "|" right=RuleConjunction)*
protected class RuleDisjunction_Group_1 extends GroupToken {
	
	public RuleDisjunction_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRuleDisjunctionAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleDisjunction_RightAssignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRuleDisjunctionAccess().getOrLeftAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {Or.left=current}
protected class RuleDisjunction_OrLeftAction_1_0 extends ActionToken  {

	public RuleDisjunction_OrLeftAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getRuleDisjunctionAccess().getOrLeftAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleDisjunction_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new RuleDisjunction_RuleConjunctionParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("left", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("left")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// "|"
protected class RuleDisjunction_VerticalLineKeyword_1_1 extends KeywordToken  {
	
	public RuleDisjunction_VerticalLineKeyword_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRuleDisjunctionAccess().getVerticalLineKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleDisjunction_OrLeftAction_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// right=RuleConjunction
protected class RuleDisjunction_RightAssignment_1_2 extends AssignmentToken  {
	
	public RuleDisjunction_RightAssignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRuleDisjunctionAccess().getRightAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleConjunction_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("right",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("right");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRuleConjunctionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getRuleDisjunctionAccess().getRightRuleConjunctionParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new RuleDisjunction_VerticalLineKeyword_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule RuleDisjunction ****************/


/************ begin Rule RuleConjunction ****************
 *
 * RuleConjunction returns Formula:
 * 	RuleSimple ({And.left=current} "&" right=RuleSimple)*;
 *
 **/

// RuleSimple ({And.left=current} "&" right=RuleSimple)*
protected class RuleConjunction_Group extends GroupToken {
	
	public RuleConjunction_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRuleConjunctionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleConjunction_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new RuleConjunction_RuleSimpleParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRuleConjunctionAccess().getAndLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleArrowAccess().getEquivalenceLeftAction_1_0_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleAtomicAccess().getFalseAction_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleArrowAccess().getImplicationLeftAction_1_0_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleUnaryPropositionalLogicAccess().getNotAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleDisjunctionAccess().getOrLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleAtomicAccess().getRuleVariableUseAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleAtomicAccess().getTrueAction_2_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// RuleSimple
protected class RuleConjunction_RuleSimpleParserRuleCall_0 extends RuleCallToken {
	
	public RuleConjunction_RuleSimpleParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getRuleConjunctionAccess().getRuleSimpleParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleSimple_RuleUnaryPropositionalLogicParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(RuleSimple_RuleUnaryPropositionalLogicParserRuleCall.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({And.left=current} "&" right=RuleSimple)*
protected class RuleConjunction_Group_1 extends GroupToken {
	
	public RuleConjunction_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRuleConjunctionAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleConjunction_RightAssignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRuleConjunctionAccess().getAndLeftAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {And.left=current}
protected class RuleConjunction_AndLeftAction_1_0 extends ActionToken  {

	public RuleConjunction_AndLeftAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getRuleConjunctionAccess().getAndLeftAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleConjunction_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new RuleConjunction_RuleSimpleParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("left", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("left")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// "&"
protected class RuleConjunction_AmpersandKeyword_1_1 extends KeywordToken  {
	
	public RuleConjunction_AmpersandKeyword_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRuleConjunctionAccess().getAmpersandKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleConjunction_AndLeftAction_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// right=RuleSimple
protected class RuleConjunction_RightAssignment_1_2 extends AssignmentToken  {
	
	public RuleConjunction_RightAssignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRuleConjunctionAccess().getRightAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleSimple_RuleUnaryPropositionalLogicParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("right",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("right");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRuleSimpleRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getRuleConjunctionAccess().getRightRuleSimpleParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new RuleConjunction_AmpersandKeyword_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule RuleConjunction ****************/


/************ begin Rule RuleSimple ****************
 *
 * // added to be easily overwritten in ltl or ctl grammar 
 * 
 * RuleSimple returns Formula:
 * 	RuleUnaryPropositionalLogic;
 *
 **/

// RuleUnaryPropositionalLogic
protected class RuleSimple_RuleUnaryPropositionalLogicParserRuleCall extends RuleCallToken {
	
	public RuleSimple_RuleUnaryPropositionalLogicParserRuleCall(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getRuleSimpleAccess().getRuleUnaryPropositionalLogicParserRuleCall();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleUnaryPropositionalLogic_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRuleConjunctionAccess().getAndLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleArrowAccess().getEquivalenceLeftAction_1_0_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleAtomicAccess().getFalseAction_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleArrowAccess().getImplicationLeftAction_1_0_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleUnaryPropositionalLogicAccess().getNotAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleDisjunctionAccess().getOrLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleAtomicAccess().getRuleVariableUseAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleAtomicAccess().getTrueAction_2_0().getType().getClassifier())
			return null;
		if(checkForRecursion(RuleUnaryPropositionalLogic_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

/************ end Rule RuleSimple ****************/


/************ begin Rule RuleUnaryPropositionalLogic ****************
 *
 * RuleUnaryPropositionalLogic returns Formula:
 * 	{Not} "!" formula=RuleStart | RuleAtomic;
 *
 **/

// {Not} "!" formula=RuleStart | RuleAtomic
protected class RuleUnaryPropositionalLogic_Alternatives extends AlternativesToken {

	public RuleUnaryPropositionalLogic_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getRuleUnaryPropositionalLogicAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleUnaryPropositionalLogic_Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new RuleUnaryPropositionalLogic_RuleAtomicParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRuleConjunctionAccess().getAndLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleArrowAccess().getEquivalenceLeftAction_1_0_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleAtomicAccess().getFalseAction_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleArrowAccess().getImplicationLeftAction_1_0_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleUnaryPropositionalLogicAccess().getNotAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleDisjunctionAccess().getOrLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleAtomicAccess().getRuleVariableUseAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleAtomicAccess().getTrueAction_2_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {Not} "!" formula=RuleStart
protected class RuleUnaryPropositionalLogic_Group_0 extends GroupToken {
	
	public RuleUnaryPropositionalLogic_Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRuleUnaryPropositionalLogicAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleUnaryPropositionalLogic_FormulaAssignment_0_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRuleUnaryPropositionalLogicAccess().getNotAction_0_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {Not}
protected class RuleUnaryPropositionalLogic_NotAction_0_0 extends ActionToken  {

	public RuleUnaryPropositionalLogic_NotAction_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getRuleUnaryPropositionalLogicAccess().getNotAction_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "!"
protected class RuleUnaryPropositionalLogic_ExclamationMarkKeyword_0_1 extends KeywordToken  {
	
	public RuleUnaryPropositionalLogic_ExclamationMarkKeyword_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRuleUnaryPropositionalLogicAccess().getExclamationMarkKeyword_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleUnaryPropositionalLogic_NotAction_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// formula=RuleStart
protected class RuleUnaryPropositionalLogic_FormulaAssignment_0_2 extends AssignmentToken  {
	
	public RuleUnaryPropositionalLogic_FormulaAssignment_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRuleUnaryPropositionalLogicAccess().getFormulaAssignment_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleStart_RuleArrowParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("formula",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("formula");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRuleStartRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getRuleUnaryPropositionalLogicAccess().getFormulaRuleStartParserRuleCall_0_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new RuleUnaryPropositionalLogic_ExclamationMarkKeyword_0_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// RuleAtomic
protected class RuleUnaryPropositionalLogic_RuleAtomicParserRuleCall_1 extends RuleCallToken {
	
	public RuleUnaryPropositionalLogic_RuleAtomicParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getRuleUnaryPropositionalLogicAccess().getRuleAtomicParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleAtomic_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(RuleAtomic_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule RuleUnaryPropositionalLogic ****************/


/************ begin Rule RuleAtomic ****************
 *
 * RuleAtomic returns Formula:
 * 	"(" RuleStart ")" | {RuleVariableUse} variable=ID | {True} "true" | {False} "false";
 *
 **/

// "(" RuleStart ")" | {RuleVariableUse} variable=ID | {True} "true" | {False} "false"
protected class RuleAtomic_Alternatives extends AlternativesToken {

	public RuleAtomic_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getRuleAtomicAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleAtomic_Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new RuleAtomic_Group_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new RuleAtomic_Group_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new RuleAtomic_Group_3(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRuleConjunctionAccess().getAndLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleArrowAccess().getEquivalenceLeftAction_1_0_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleAtomicAccess().getFalseAction_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleArrowAccess().getImplicationLeftAction_1_0_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleUnaryPropositionalLogicAccess().getNotAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleDisjunctionAccess().getOrLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleAtomicAccess().getRuleVariableUseAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleAtomicAccess().getTrueAction_2_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "(" RuleStart ")"
protected class RuleAtomic_Group_0 extends GroupToken {
	
	public RuleAtomic_Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRuleAtomicAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleAtomic_RightParenthesisKeyword_0_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "("
protected class RuleAtomic_LeftParenthesisKeyword_0_0 extends KeywordToken  {
	
	public RuleAtomic_LeftParenthesisKeyword_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRuleAtomicAccess().getLeftParenthesisKeyword_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// RuleStart
protected class RuleAtomic_RuleStartParserRuleCall_0_1 extends RuleCallToken {
	
	public RuleAtomic_RuleStartParserRuleCall_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getRuleAtomicAccess().getRuleStartParserRuleCall_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleStart_RuleArrowParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(RuleStart_RuleArrowParserRuleCall.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleAtomic_LeftParenthesisKeyword_0_0(lastRuleCallOrigin, next, actIndex, inst);
			default: return null;
		}	
	}	
}

// ")"
protected class RuleAtomic_RightParenthesisKeyword_0_2 extends KeywordToken  {
	
	public RuleAtomic_RightParenthesisKeyword_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRuleAtomicAccess().getRightParenthesisKeyword_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleAtomic_RuleStartParserRuleCall_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// {RuleVariableUse} variable=ID
protected class RuleAtomic_Group_1 extends GroupToken {
	
	public RuleAtomic_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRuleAtomicAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleAtomic_VariableAssignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRuleAtomicAccess().getRuleVariableUseAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {RuleVariableUse}
protected class RuleAtomic_RuleVariableUseAction_1_0 extends ActionToken  {

	public RuleAtomic_RuleVariableUseAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getRuleAtomicAccess().getRuleVariableUseAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// variable=ID
protected class RuleAtomic_VariableAssignment_1_1 extends AssignmentToken  {
	
	public RuleAtomic_VariableAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRuleAtomicAccess().getVariableAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleAtomic_RuleVariableUseAction_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("variable",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("variable");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getRuleAtomicAccess().getVariableIDTerminalRuleCall_1_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getRuleAtomicAccess().getVariableIDTerminalRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}


// {True} "true"
protected class RuleAtomic_Group_2 extends GroupToken {
	
	public RuleAtomic_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRuleAtomicAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleAtomic_TrueKeyword_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRuleAtomicAccess().getTrueAction_2_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {True}
protected class RuleAtomic_TrueAction_2_0 extends ActionToken  {

	public RuleAtomic_TrueAction_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getRuleAtomicAccess().getTrueAction_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "true"
protected class RuleAtomic_TrueKeyword_2_1 extends KeywordToken  {
	
	public RuleAtomic_TrueKeyword_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRuleAtomicAccess().getTrueKeyword_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleAtomic_TrueAction_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// {False} "false"
protected class RuleAtomic_Group_3 extends GroupToken {
	
	public RuleAtomic_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRuleAtomicAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleAtomic_FalseKeyword_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRuleAtomicAccess().getFalseAction_3_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {False}
protected class RuleAtomic_FalseAction_3_0 extends ActionToken  {

	public RuleAtomic_FalseAction_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getRuleAtomicAccess().getFalseAction_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "false"
protected class RuleAtomic_FalseKeyword_3_1 extends KeywordToken  {
	
	public RuleAtomic_FalseKeyword_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRuleAtomicAccess().getFalseKeyword_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleAtomic_FalseAction_3_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



/************ end Rule RuleAtomic ****************/

}
