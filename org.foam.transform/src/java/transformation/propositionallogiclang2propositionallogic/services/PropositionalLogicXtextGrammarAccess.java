/*
* generated by Xtext
*/
package transformation.propositionallogiclang2propositionallogic.services;

import java.util.List;

import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

import com.google.inject.Inject;
import com.google.inject.Singleton;

@Singleton
public class PropositionalLogicXtextGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class RuleStartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RuleStart");
		private final RuleCall cRuleArrowParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//RuleStart returns Formula:
		//	RuleArrow;
		public ParserRule getRule() { return rule; }

		//RuleArrow
		public RuleCall getRuleArrowParserRuleCall() { return cRuleArrowParserRuleCall; }
	}

	public class RuleArrowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RuleArrow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRuleDisjunctionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cImplicationLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cEquivalenceLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusGreaterThanSignKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightRuleDisjunctionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//RuleArrow returns Formula:
		//	RuleDisjunction (({Implication.left=current} "->" | {Equivalence.left=current} "<->") right=RuleDisjunction)*;
		public ParserRule getRule() { return rule; }

		//RuleDisjunction (({Implication.left=current} "->" | {Equivalence.left=current} "<->") right=RuleDisjunction)*
		public Group getGroup() { return cGroup; }

		//RuleDisjunction
		public RuleCall getRuleDisjunctionParserRuleCall_0() { return cRuleDisjunctionParserRuleCall_0; }

		//(({Implication.left=current} "->" | {Equivalence.left=current} "<->") right=RuleDisjunction)*
		public Group getGroup_1() { return cGroup_1; }

		//{Implication.left=current} "->" | {Equivalence.left=current} "<->"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{Implication.left=current} "->"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Implication.left=current}
		public Action getImplicationLeftAction_1_0_0_0() { return cImplicationLeftAction_1_0_0_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_0_0_1() { return cHyphenMinusGreaterThanSignKeyword_1_0_0_1; }

		//{Equivalence.left=current} "<->"
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{Equivalence.left=current}
		public Action getEquivalenceLeftAction_1_0_1_0() { return cEquivalenceLeftAction_1_0_1_0; }

		//"<->"
		public Keyword getLessThanSignHyphenMinusGreaterThanSignKeyword_1_0_1_1() { return cLessThanSignHyphenMinusGreaterThanSignKeyword_1_0_1_1; }

		//right=RuleDisjunction
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//RuleDisjunction
		public RuleCall getRightRuleDisjunctionParserRuleCall_1_1_0() { return cRightRuleDisjunctionParserRuleCall_1_1_0; }
	}

	public class RuleDisjunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RuleDisjunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRuleConjunctionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightRuleConjunctionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//RuleDisjunction returns Formula:
		//	RuleConjunction ({Or.left=current} "|" right=RuleConjunction)*;
		public ParserRule getRule() { return rule; }

		//RuleConjunction ({Or.left=current} "|" right=RuleConjunction)*
		public Group getGroup() { return cGroup; }

		//RuleConjunction
		public RuleCall getRuleConjunctionParserRuleCall_0() { return cRuleConjunctionParserRuleCall_0; }

		//({Or.left=current} "|" right=RuleConjunction)*
		public Group getGroup_1() { return cGroup_1; }

		//{Or.left=current}
		public Action getOrLeftAction_1_0() { return cOrLeftAction_1_0; }

		//"|"
		public Keyword getVerticalLineKeyword_1_1() { return cVerticalLineKeyword_1_1; }

		//right=RuleConjunction
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//RuleConjunction
		public RuleCall getRightRuleConjunctionParserRuleCall_1_2_0() { return cRightRuleConjunctionParserRuleCall_1_2_0; }
	}

	public class RuleConjunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RuleConjunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRuleSimpleParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightRuleSimpleParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//RuleConjunction returns Formula:
		//	RuleSimple ({And.left=current} "&" right=RuleSimple)*;
		public ParserRule getRule() { return rule; }

		//RuleSimple ({And.left=current} "&" right=RuleSimple)*
		public Group getGroup() { return cGroup; }

		//RuleSimple
		public RuleCall getRuleSimpleParserRuleCall_0() { return cRuleSimpleParserRuleCall_0; }

		//({And.left=current} "&" right=RuleSimple)*
		public Group getGroup_1() { return cGroup_1; }

		//{And.left=current}
		public Action getAndLeftAction_1_0() { return cAndLeftAction_1_0; }

		//"&"
		public Keyword getAmpersandKeyword_1_1() { return cAmpersandKeyword_1_1; }

		//right=RuleSimple
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//RuleSimple
		public RuleCall getRightRuleSimpleParserRuleCall_1_2_0() { return cRightRuleSimpleParserRuleCall_1_2_0; }
	}

	public class RuleSimpleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RuleSimple");
		private final RuleCall cRuleUnaryPropositionalLogicParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// added to be easily overwritten in ltl or ctl grammar 
		//
		//RuleSimple returns Formula:
		//	RuleUnaryPropositionalLogic;
		public ParserRule getRule() { return rule; }

		//RuleUnaryPropositionalLogic
		public RuleCall getRuleUnaryPropositionalLogicParserRuleCall() { return cRuleUnaryPropositionalLogicParserRuleCall; }
	}

	public class RuleUnaryPropositionalLogicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RuleUnaryPropositionalLogic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cNotAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cFormulaAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cFormulaRuleStartParserRuleCall_0_2_0 = (RuleCall)cFormulaAssignment_0_2.eContents().get(0);
		private final RuleCall cRuleAtomicParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//RuleUnaryPropositionalLogic returns Formula:
		//	{Not} "!" formula=RuleStart | RuleAtomic;
		public ParserRule getRule() { return rule; }

		//{Not} "!" formula=RuleStart | RuleAtomic
		public Alternatives getAlternatives() { return cAlternatives; }

		//{Not} "!" formula=RuleStart
		public Group getGroup_0() { return cGroup_0; }

		//{Not}
		public Action getNotAction_0_0() { return cNotAction_0_0; }

		//"!"
		public Keyword getExclamationMarkKeyword_0_1() { return cExclamationMarkKeyword_0_1; }

		//formula=RuleStart
		public Assignment getFormulaAssignment_0_2() { return cFormulaAssignment_0_2; }

		//RuleStart
		public RuleCall getFormulaRuleStartParserRuleCall_0_2_0() { return cFormulaRuleStartParserRuleCall_0_2_0; }

		//RuleAtomic
		public RuleCall getRuleAtomicParserRuleCall_1() { return cRuleAtomicParserRuleCall_1; }
	}

	public class RuleAtomicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RuleAtomic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cRuleStartParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cRuleVariableUseAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cVariableAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVariableIDTerminalRuleCall_1_1_0 = (RuleCall)cVariableAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cTrueAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cTrueKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cFalseAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cFalseKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		
		//RuleAtomic returns Formula:
		//	"(" RuleStart ")" | {RuleVariableUse} variable=ID | {True} "true" | {False} "false";
		public ParserRule getRule() { return rule; }

		//"(" RuleStart ")" | {RuleVariableUse} variable=ID | {True} "true" | {False} "false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"(" RuleStart ")"
		public Group getGroup_0() { return cGroup_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//RuleStart
		public RuleCall getRuleStartParserRuleCall_0_1() { return cRuleStartParserRuleCall_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }

		//{RuleVariableUse} variable=ID
		public Group getGroup_1() { return cGroup_1; }

		//{RuleVariableUse}
		public Action getRuleVariableUseAction_1_0() { return cRuleVariableUseAction_1_0; }

		//variable=ID
		public Assignment getVariableAssignment_1_1() { return cVariableAssignment_1_1; }

		//ID
		public RuleCall getVariableIDTerminalRuleCall_1_1_0() { return cVariableIDTerminalRuleCall_1_1_0; }

		//{True} "true"
		public Group getGroup_2() { return cGroup_2; }

		//{True}
		public Action getTrueAction_2_0() { return cTrueAction_2_0; }

		//"true"
		public Keyword getTrueKeyword_2_1() { return cTrueKeyword_2_1; }

		//{False} "false"
		public Group getGroup_3() { return cGroup_3; }

		//{False}
		public Action getFalseAction_3_0() { return cFalseAction_3_0; }

		//"false"
		public Keyword getFalseKeyword_3_1() { return cFalseKeyword_3_1; }
	}
	
	
	private RuleStartElements pRuleStart;
	private RuleArrowElements pRuleArrow;
	private RuleDisjunctionElements pRuleDisjunction;
	private RuleConjunctionElements pRuleConjunction;
	private RuleSimpleElements pRuleSimple;
	private RuleUnaryPropositionalLogicElements pRuleUnaryPropositionalLogic;
	private RuleAtomicElements pRuleAtomic;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public PropositionalLogicXtextGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("propositionallogiclang2propositionallogic.PropositionalLogicXtext".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//RuleStart returns Formula:
	//	RuleArrow;
	public RuleStartElements getRuleStartAccess() {
		return (pRuleStart != null) ? pRuleStart : (pRuleStart = new RuleStartElements());
	}
	
	public ParserRule getRuleStartRule() {
		return getRuleStartAccess().getRule();
	}

	//RuleArrow returns Formula:
	//	RuleDisjunction (({Implication.left=current} "->" | {Equivalence.left=current} "<->") right=RuleDisjunction)*;
	public RuleArrowElements getRuleArrowAccess() {
		return (pRuleArrow != null) ? pRuleArrow : (pRuleArrow = new RuleArrowElements());
	}
	
	public ParserRule getRuleArrowRule() {
		return getRuleArrowAccess().getRule();
	}

	//RuleDisjunction returns Formula:
	//	RuleConjunction ({Or.left=current} "|" right=RuleConjunction)*;
	public RuleDisjunctionElements getRuleDisjunctionAccess() {
		return (pRuleDisjunction != null) ? pRuleDisjunction : (pRuleDisjunction = new RuleDisjunctionElements());
	}
	
	public ParserRule getRuleDisjunctionRule() {
		return getRuleDisjunctionAccess().getRule();
	}

	//RuleConjunction returns Formula:
	//	RuleSimple ({And.left=current} "&" right=RuleSimple)*;
	public RuleConjunctionElements getRuleConjunctionAccess() {
		return (pRuleConjunction != null) ? pRuleConjunction : (pRuleConjunction = new RuleConjunctionElements());
	}
	
	public ParserRule getRuleConjunctionRule() {
		return getRuleConjunctionAccess().getRule();
	}

	//// added to be easily overwritten in ltl or ctl grammar 
	//
	//RuleSimple returns Formula:
	//	RuleUnaryPropositionalLogic;
	public RuleSimpleElements getRuleSimpleAccess() {
		return (pRuleSimple != null) ? pRuleSimple : (pRuleSimple = new RuleSimpleElements());
	}
	
	public ParserRule getRuleSimpleRule() {
		return getRuleSimpleAccess().getRule();
	}

	//RuleUnaryPropositionalLogic returns Formula:
	//	{Not} "!" formula=RuleStart | RuleAtomic;
	public RuleUnaryPropositionalLogicElements getRuleUnaryPropositionalLogicAccess() {
		return (pRuleUnaryPropositionalLogic != null) ? pRuleUnaryPropositionalLogic : (pRuleUnaryPropositionalLogic = new RuleUnaryPropositionalLogicElements());
	}
	
	public ParserRule getRuleUnaryPropositionalLogicRule() {
		return getRuleUnaryPropositionalLogicAccess().getRule();
	}

	//RuleAtomic returns Formula:
	//	"(" RuleStart ")" | {RuleVariableUse} variable=ID | {True} "true" | {False} "false";
	public RuleAtomicElements getRuleAtomicAccess() {
		return (pRuleAtomic != null) ? pRuleAtomic : (pRuleAtomic = new RuleAtomicElements());
	}
	
	public ParserRule getRuleAtomicRule() {
		return getRuleAtomicAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
