import java.io.File
import org.eclipse.emf.mwe.utils.DirectoryCleaner
import org.eclipse.emf.mwe.utils.FileCopy
import org.eclipse.emf.mwe.utils.StandaloneSetup
import org.eclipse.xtext.generator.Generator
import org.eclipse.xtext.generator.LanguageConfig
import org.eclipse.xtext.generator.ecore.EMFGeneratorFragment
import org.eclipse.xtext.generator.grammarAccess.GrammarAccessFragment
import org.eclipse.xtext.generator.parser.antlr.XtextAntlrGeneratorFragment
import org.eclipse.xtext.generator.serializer.SerializerFragment

defaultTasks 'generatePlogicXtext'

buildscript {
	dependencies {
		classpath files(
			'../cnf/buildrepo/org.eclipse.emf.mwe.core/org.eclipse.emf.mwe.core-1.3.3.jar',
			'../cnf/buildrepo/org.eclipse.emf.mwe.utils/org.eclipse.emf.mwe.utils-1.3.3.jar',
			'../cnf/buildrepo/org.eclipse.emf.mwe2.lib/org.eclipse.emf.mwe2.lib-2.4.1.jar',
			'../cnf/buildrepo/org.eclipse.emf.mwe2.runtime/org.eclipse.emf.mwe2.runtime-2.4.1.jar',
			'../cnf/buildrepo/org.eclipse.emf.ecore/org.eclipse.emf.ecore-2.10.0.jar',
			'../cnf/buildrepo/org.eclipse.emf.ecore.xmi/org.eclipse.emf.ecore.xmi-2.10.0.jar',
			'../cnf/buildrepo/org.eclipse.emf.common/org.eclipse.emf.common-2.10.0.jar',
			'../cnf/buildrepo/org.eclipse.emf.codegen/org.eclipse.emf.codegen-2.10.0.jar',
			'../cnf/buildrepo/org.eclipse.emf.codegen.ecore/org.eclipse.emf.codegen.ecore-2.9.1.jar',
			'../cnf/buildrepo/com.google.guava/com.google.guava-11.0.2.jar',
			'../cnf/buildrepo/com.google.inject/com.google.inject-3.0.0.jar',
			'../cnf/buildrepo/org.eclipse.xtext/org.eclipse.xtext-2.6.2.jar',
			'../cnf/buildrepo/org.eclipse.xtext.util/org.eclipse.xtext.util-2.6.2.jar',
			'../cnf/buildrepo/org.eclipse.xtext.generator/org.eclipse.xtext.generator-2.6.2.jar',
			'../cnf/buildrepo/org.eclipse.xpand/org.eclipse.xpand-2.0.0.jar',
			'../cnf/buildrepo/org.eclipse.xtend/org.eclipse.xtend-2.0.0.jar',
			'../cnf/buildrepo/org.antlr.runtime/org.antlr.runtime-3.2.0.jar',
			'../cnf/buildrepo/org.eclipse.jdt.core/org.eclipse.jdt.core-3.10.0.jar',
			'../cnf/buildrepo/com.ibm.icu/com.ibm.icu-52.1.0.jar',
			// TODO - hack
			'../org.foam.models/generated/org.foam.models.propositionallogic.jar',
			'../cnf/buildrepo/org.apache.httpcomponents.httpclient/org.apache.httpcomponents.httpclient-4.3.3.jar',
			'./main/src' // needed for xtext compiler to find .xtext resource			
		)
	}
}

ext.XTEXT_DIR = 'main/xtext-gen'

sourceSets.main.java.srcDir XTEXT_DIR

task generatePlogicXtext << {
	final grammarURI = "classpath:/org/foam/xtext/plogic/PropositionalLogicXtext.xtext"
	final projectName = "org.foam.xtext.plogic"
	final runtimeProject = "../${projectName}"
		
    file("${SRC_DIR}/org/foam/xtext/plogic/PropositionalLogicXtextRuntimeModule.java").delete()
    file("${SRC_DIR}/org/foam/xtext/plogic/PropositionalLogicXtextStandaloneSetup.java").delete()
	
	new StandaloneSetup().with {
		scanClassPath  = true
		platformUri = ".."
		
		addRegisterGeneratedEPackage("org.foam.propositionallogic.PropositionallogicPackage") // problem, solved by hack
		addRegisterEcoreFile("platform:/resource/org.foam.models/models/propositionallogic.ecore")
		addRegisterGenModelFile("platform:/resource/org.foam.models/models/propositionallogic.genmodel")
	}
	
	file(XTEXT_DIR).deleteDir()
	file(XTEXT_DIR).mkdir()
	
	file('model/generated').deleteDir()
	
	// replace MANIFEST.MF with new one which doesn't import any dependencies
	final MANIFEST_PATH = "META-INF/MANIFEST.MF"
	final MANIFEST_CONTENT = """\
			Manifest-Version: 1.0
			Bundle-ManifestVersion: 2
			Bundle-Name: org.foam.xtext.plogic
			Bundle-Vendor: My Company
			Bundle-Version: 1.0.0.qualifier
			Bundle-SymbolicName: org.foam.xtext.plogic; singleton:=true
			Bundle-ActivationPolicy: lazy
			Bundle-RequiredExecutionEnvironment: J2SE-1.5
			""".stripIndent()
	file(MANIFEST_PATH).getParentFile().mkdirs()
	file(MANIFEST_PATH).write(MANIFEST_CONTENT)
	
	new Generator().with {
		srcPath = "/main/src"
		srcGenPath = "/main/xtext-gen"

		pathRtProject = "../${projectName}"
		
		projectNameRt = projectName
		encoding = "UTF-8"
		
		addLanguage(new LanguageConfig().with {
			uri = grammarURI
			
			// Java API to access grammar elements (required by several other fragments)
			addFragment(new GrammarAccessFragment())
							
			// generates Java API for the generated EPackages
			addFragment(new EMFGeneratorFragment())

			// the Antlr parser
			addFragment(new XtextAntlrGeneratorFragment())
			
			// serializer 2.0
			addFragment(new SerializerFragment(generateStub: false))
			it
		})
		
		preInvoke(); invoke(null); postInvoke()
	}
	
	// write MANIFEST.MF over generated one, this step is not needed
	// but prevents error in eclipse
	file(MANIFEST_PATH).write(MANIFEST_CONTENT)
	
	file("plugin.xml").delete()
	file("plugin.xml_gen").delete()
}

// workaround for xtext generator
// generator downloads .antlr-generator-3.2.0.jar and .antlr-generator-3.2.0-patch.jar
// into directory from which was gradle executed. It doesn't take into account project
// structure. This workaround executes new gradle instance and runs xtext generation.
// TODO - test with gradle wrapper only
task generateRedirect(type: Exec) {	
	workingDir projectDir
	commandLine 'gradle', 'generatePlogicXtext'
}

compileXtend.dependsOn('generateRedirect')

clean << {
	["META-INF", XTEXT_DIR, "model"].each {
		file(it).deleteDir()
	}
}
