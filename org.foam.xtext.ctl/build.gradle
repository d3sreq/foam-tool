import aQute.bnd.build.Workspace
import org.eclipse.emf.mwe.utils.StandaloneSetup
import org.eclipse.xtext.generator.Generator
import org.eclipse.xtext.generator.LanguageConfig
import org.eclipse.xtext.generator.ecore.EMFGeneratorFragment
import org.eclipse.xtext.generator.grammarAccess.GrammarAccessFragment
import org.eclipse.xtext.generator.parser.antlr.XtextAntlrGeneratorFragment
import org.eclipse.xtext.generator.serializer.SerializerFragment

defaultTasks 'clean', 'build'

buildscript {
	dependencies {
		classpath files(
			// hack needed for xtext compiler to find .xtext resources
			'../org.foam.xtext.plogic/main/src',
			'./main/src'
		)
	}
}

final XTEXT_DIR = 'main/xtext-gen'
final RUNTIME_MODULE_FILE = "${SRC_DIR}/org/foam/xtext/ctl/CtlXtextRuntimeModule.java"
final STANDALONE_SETUP_FILE = "${SRC_DIR}/org/foam/xtext/ctl/CtlXtextStandaloneSetup.java"
final META_INF_DIR = 'META-INF'

sourceSets.main.java.srcDir XTEXT_DIR
sourceSets.main.resources.srcDir XTEXT_DIR
sourceSets.main.resources.exclude '**/*.java'

task generateCtl << {
	final grammarURI = "classpath:/org/foam/xtext/ctl/CtlXtext.xtext"
	final projectName = "org.foam.xtext.ctl"
		
	delete RUNTIME_MODULE_FILE, STANDALONE_SETUP_FILE
	
	new StandaloneSetup().with {
		scanClassPath  = true
		platformUri = ".."
		
		addRegisterGeneratedEPackage("org.foam.ctl.CtlPackage") // problem, solved by hack
		addRegisterGenModelFile("platform:/resource/org.foam.models/models/ctl.genmodel")
		addRegisterGenModelFile("platform:/resource/org.foam.xtext.plogic/model/model/PropositionalLogicXtext.genmodel")
	}
	
	delete XTEXT_DIR
	file(XTEXT_DIR).mkdir()
	
	delete RUNTIME_MODULE_FILE, STANDALONE_SETUP_FILE
	
	// replace MANIFEST.MF with new one which doesn't import any dependencies
	final MANIFEST_PATH = "${META_INF_DIR}/MANIFEST.MF"
	final MANIFEST_CONTENT = """\
		Manifest-Version: 1.0
		Bundle-ManifestVersion: 2
		Bundle-Name: org.foam.xtext.ctl
		Bundle-Vendor: My Company
		Bundle-Version: 1.0.0.qualifier
		Bundle-SymbolicName: org.foam.xtext.ctl; singleton:=true
		Bundle-ActivationPolicy: lazy
		Bundle-RequiredExecutionEnvironment: JavaSE-1.7
		""".stripIndent()
	file(META_INF_DIR).mkdirs()
	file(MANIFEST_PATH).write(MANIFEST_CONTENT)
	
	new Generator().with {
		srcPath = "/main/src"
		srcGenPath = "/main/xtext-gen"

		pathRtProject = "../${projectName}"
		projectNameRt = projectName
		encoding = "UTF-8"
		
		addLanguage(new LanguageConfig().with {
			uri = grammarURI
			
			// Java API to access grammar elements (required by several other fragments)
			// setting of property "xmlVersion" to value "1.0" causes generation
			// of CtlXtext.xmi file (instead of CtlXtext.xtextbin used by newer xtext).
			// CtlXtext.xmi is needed during gradle tests
			addFragment(new GrammarAccessFragment(xmlVersion: "1.0"))
							
			// generates Java API for the generated EPackages
			addFragment(new EMFGeneratorFragment())

			// the Antlr parser
			addFragment(new XtextAntlrGeneratorFragment())
			
			// serializer 2.0
			addFragment(new SerializerFragment(generateStub: false))
			it
		})
		
		preInvoke(); invoke(null); postInvoke()
	}
	
	// write MANIFEST.MF over generated one, this step is not needed
	// but prevents error in eclipse
	file(MANIFEST_PATH).write(MANIFEST_CONTENT)
	
	delete "plugin.xml", "plugin.xml_gen"
}

processResources {
	from("${XTEXT_DIR}") {
		include '**/*.xmi'
	}

	into 'build/resources/main'
	includeEmptyDirs = false
}

// workaround for xtext generator
// generator downloads .antlr-generator-3.2.0.jar and .antlr-generator-3.2.0-patch.jar
// into directory from which was gradle executed. It doesn't take into account project
// structure. This workaround executes new gradle instance and runs xtext generation.
task generateRedirect(type: Exec) {
	inputs.file "${SRC_DIR}/org/foam/xtext/ctl/CtlXtext.xtext"
	outputs.dir XTEXT_DIR
	outputs.dir META_INF_DIR
	outputs.file RUNTIME_MODULE_FILE
	outputs.file STANDALONE_SETUP_FILE
	
	workingDir projectDir
	commandLine 'gradle', 'generateCtl'
}

compileXtend.dependsOn('generateRedirect')

//Setup project dependencies
def parentDir = project.projectDir.getParentFile()
def workspace = Workspace.getWorkspace(parentDir)
def bndProject = workspace.getProject(projectDir)
bndProject.getDependson().each {
	generateRedirect.dependsOn(":${it.name}:build")
}

clean << {
	project.delete META_INF_DIR, XTEXT_DIR, RUNTIME_MODULE_FILE, STANDALONE_SETUP_FILE
}
