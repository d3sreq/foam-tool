/*
* generated by Xtext
*/
package ltllang2ltl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import propositionallogiclang2propositionallogic.services.PropositionalLogicXtextGrammarAccess;

@Singleton
public class LtlXtextGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class RuleStartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RuleStart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRuleArrowParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cUntilLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cUKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cReleasesLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cRKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Group cGroup_1_0_2 = (Group)cAlternatives_1_0.eContents().get(2);
		private final Action cSinceLeftAction_1_0_2_0 = (Action)cGroup_1_0_2.eContents().get(0);
		private final Keyword cSKeyword_1_0_2_1 = (Keyword)cGroup_1_0_2.eContents().get(1);
		private final Group cGroup_1_0_3 = (Group)cAlternatives_1_0.eContents().get(3);
		private final Action cTriggeredLeftAction_1_0_3_0 = (Action)cGroup_1_0_3.eContents().get(0);
		private final Keyword cTKeyword_1_0_3_1 = (Keyword)cGroup_1_0_3.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightRuleArrowParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//// precedence order: 
		//// - the unary operators bind stronger than the binary ones.
		//// - ! and G, F, X, H, O bind equally strong. 
		//// - U,R,S,T take precedence over &, |, -> and <-> (U binds weaker)
		//// from: http://www-i2.informatik.rwth-aachen.de/i2/fileadmin/user_upload/documents/MC08/mc_lec13.pdf
		//// and http://vlsi.colorado.edu/~vis/doc/ctl_ltl/ctl_ltl/ctl_ltl.html
		//// overwritten to add "starting" rule.
		//// Without this rule only RuleSimple and RuleUnaryLtl would be used
		//// as accepting grammar rules
		//RuleStart returns Formula:
		//	RuleArrow (({Until.left=current} "U" | {Releases.left=current} "R" | {Since.left=current} "S" |
		//	{Triggered.left=current} "T") right=RuleArrow)*;
		public ParserRule getRule() { return rule; }

		//RuleArrow (({Until.left=current} "U" | {Releases.left=current} "R" | {Since.left=current} "S" | {Triggered.left=current}
		//"T") right=RuleArrow)*
		public Group getGroup() { return cGroup; }

		//RuleArrow
		public RuleCall getRuleArrowParserRuleCall_0() { return cRuleArrowParserRuleCall_0; }

		//(({Until.left=current} "U" | {Releases.left=current} "R" | {Since.left=current} "S" | {Triggered.left=current} "T")
		//right=RuleArrow)*
		public Group getGroup_1() { return cGroup_1; }

		//{Until.left=current} "U" | {Releases.left=current} "R" | {Since.left=current} "S" | {Triggered.left=current} "T"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{Until.left=current} "U"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Until.left=current}
		public Action getUntilLeftAction_1_0_0_0() { return cUntilLeftAction_1_0_0_0; }

		//"U"
		public Keyword getUKeyword_1_0_0_1() { return cUKeyword_1_0_0_1; }

		//{Releases.left=current} "R"
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{Releases.left=current}
		public Action getReleasesLeftAction_1_0_1_0() { return cReleasesLeftAction_1_0_1_0; }

		//"R"
		public Keyword getRKeyword_1_0_1_1() { return cRKeyword_1_0_1_1; }

		//{Since.left=current} "S"
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }

		//{Since.left=current}
		public Action getSinceLeftAction_1_0_2_0() { return cSinceLeftAction_1_0_2_0; }

		//"S"
		public Keyword getSKeyword_1_0_2_1() { return cSKeyword_1_0_2_1; }

		//{Triggered.left=current} "T"
		public Group getGroup_1_0_3() { return cGroup_1_0_3; }

		//{Triggered.left=current}
		public Action getTriggeredLeftAction_1_0_3_0() { return cTriggeredLeftAction_1_0_3_0; }

		//"T"
		public Keyword getTKeyword_1_0_3_1() { return cTKeyword_1_0_3_1; }

		//right=RuleArrow
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//RuleArrow
		public RuleCall getRightRuleArrowParserRuleCall_1_1_0() { return cRightRuleArrowParserRuleCall_1_1_0; }
	}

	public class RuleSimpleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RuleSimple");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Group cGroup_0_0_0 = (Group)cAlternatives_0_0.eContents().get(0);
		private final Action cGloballyAction_0_0_0_0 = (Action)cGroup_0_0_0.eContents().get(0);
		private final Keyword cGKeyword_0_0_0_1 = (Keyword)cGroup_0_0_0.eContents().get(1);
		private final Group cGroup_0_0_1 = (Group)cAlternatives_0_0.eContents().get(1);
		private final Action cFutureAction_0_0_1_0 = (Action)cGroup_0_0_1.eContents().get(0);
		private final Keyword cFKeyword_0_0_1_1 = (Keyword)cGroup_0_0_1.eContents().get(1);
		private final Group cGroup_0_0_2 = (Group)cAlternatives_0_0.eContents().get(2);
		private final Action cNextAction_0_0_2_0 = (Action)cGroup_0_0_2.eContents().get(0);
		private final Keyword cXKeyword_0_0_2_1 = (Keyword)cGroup_0_0_2.eContents().get(1);
		private final Group cGroup_0_0_3 = (Group)cAlternatives_0_0.eContents().get(3);
		private final Action cHistoricallyAction_0_0_3_0 = (Action)cGroup_0_0_3.eContents().get(0);
		private final Keyword cHKeyword_0_0_3_1 = (Keyword)cGroup_0_0_3.eContents().get(1);
		private final Group cGroup_0_0_4 = (Group)cAlternatives_0_0.eContents().get(4);
		private final Action cOnceAction_0_0_4_0 = (Action)cGroup_0_0_4.eContents().get(0);
		private final Keyword cOKeyword_0_0_4_1 = (Keyword)cGroup_0_0_4.eContents().get(1);
		private final Assignment cFormulaAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cFormulaRuleStartParserRuleCall_0_1_0 = (RuleCall)cFormulaAssignment_0_1.eContents().get(0);
		private final RuleCall cRuleUnaryPropositionalLogicParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// overwritten rule from propositionallogic to add LTL specific formulas
		//RuleSimple returns Formula:
		//	({Globally} "G" | {Future} "F" | {Next} "X" | {Historically} "H" | {Once} "O") formula=RuleStart |
		//	RuleUnaryPropositionalLogic;
		public ParserRule getRule() { return rule; }

		//({Globally} "G" | {Future} "F" | {Next} "X" | {Historically} "H" | {Once} "O") formula=RuleStart |
		//RuleUnaryPropositionalLogic
		public Alternatives getAlternatives() { return cAlternatives; }

		//({Globally} "G" | {Future} "F" | {Next} "X" | {Historically} "H" | {Once} "O") formula=RuleStart
		public Group getGroup_0() { return cGroup_0; }

		//{Globally} "G" | {Future} "F" | {Next} "X" | {Historically} "H" | {Once} "O"
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }

		//{Globally} "G"
		public Group getGroup_0_0_0() { return cGroup_0_0_0; }

		//{Globally}
		public Action getGloballyAction_0_0_0_0() { return cGloballyAction_0_0_0_0; }

		//"G"
		public Keyword getGKeyword_0_0_0_1() { return cGKeyword_0_0_0_1; }

		//{Future} "F"
		public Group getGroup_0_0_1() { return cGroup_0_0_1; }

		//{Future}
		public Action getFutureAction_0_0_1_0() { return cFutureAction_0_0_1_0; }

		//"F"
		public Keyword getFKeyword_0_0_1_1() { return cFKeyword_0_0_1_1; }

		//{Next} "X"
		public Group getGroup_0_0_2() { return cGroup_0_0_2; }

		//{Next}
		public Action getNextAction_0_0_2_0() { return cNextAction_0_0_2_0; }

		//"X"
		public Keyword getXKeyword_0_0_2_1() { return cXKeyword_0_0_2_1; }

		//{Historically} "H"
		public Group getGroup_0_0_3() { return cGroup_0_0_3; }

		//{Historically}
		public Action getHistoricallyAction_0_0_3_0() { return cHistoricallyAction_0_0_3_0; }

		//"H"
		public Keyword getHKeyword_0_0_3_1() { return cHKeyword_0_0_3_1; }

		//{Once} "O"
		public Group getGroup_0_0_4() { return cGroup_0_0_4; }

		//{Once}
		public Action getOnceAction_0_0_4_0() { return cOnceAction_0_0_4_0; }

		//"O"
		public Keyword getOKeyword_0_0_4_1() { return cOKeyword_0_0_4_1; }

		//formula=RuleStart
		public Assignment getFormulaAssignment_0_1() { return cFormulaAssignment_0_1; }

		//RuleStart
		public RuleCall getFormulaRuleStartParserRuleCall_0_1_0() { return cFormulaRuleStartParserRuleCall_0_1_0; }

		//RuleUnaryPropositionalLogic
		public RuleCall getRuleUnaryPropositionalLogicParserRuleCall_1() { return cRuleUnaryPropositionalLogicParserRuleCall_1; }
	}
	
	
	private RuleStartElements pRuleStart;
	private RuleSimpleElements pRuleSimple;
	
	private final Grammar grammar;

	private PropositionalLogicXtextGrammarAccess gaPropositionalLogicXtext;

	@Inject
	public LtlXtextGrammarAccess(GrammarProvider grammarProvider,
		PropositionalLogicXtextGrammarAccess gaPropositionalLogicXtext) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaPropositionalLogicXtext = gaPropositionalLogicXtext;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("ltllang2ltl.LtlXtext".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public PropositionalLogicXtextGrammarAccess getPropositionalLogicXtextGrammarAccess() {
		return gaPropositionalLogicXtext;
	}

	
	//// precedence order: 
	//// - the unary operators bind stronger than the binary ones.
	//// - ! and G, F, X, H, O bind equally strong. 
	//// - U,R,S,T take precedence over &, |, -> and <-> (U binds weaker)
	//// from: http://www-i2.informatik.rwth-aachen.de/i2/fileadmin/user_upload/documents/MC08/mc_lec13.pdf
	//// and http://vlsi.colorado.edu/~vis/doc/ctl_ltl/ctl_ltl/ctl_ltl.html
	//// overwritten to add "starting" rule.
	//// Without this rule only RuleSimple and RuleUnaryLtl would be used
	//// as accepting grammar rules
	//RuleStart returns Formula:
	//	RuleArrow (({Until.left=current} "U" | {Releases.left=current} "R" | {Since.left=current} "S" |
	//	{Triggered.left=current} "T") right=RuleArrow)*;
	public RuleStartElements getRuleStartAccess() {
		return (pRuleStart != null) ? pRuleStart : (pRuleStart = new RuleStartElements());
	}
	
	public ParserRule getRuleStartRule() {
		return getRuleStartAccess().getRule();
	}

	//// overwritten rule from propositionallogic to add LTL specific formulas
	//RuleSimple returns Formula:
	//	({Globally} "G" | {Future} "F" | {Next} "X" | {Historically} "H" | {Once} "O") formula=RuleStart |
	//	RuleUnaryPropositionalLogic;
	public RuleSimpleElements getRuleSimpleAccess() {
		return (pRuleSimple != null) ? pRuleSimple : (pRuleSimple = new RuleSimpleElements());
	}
	
	public ParserRule getRuleSimpleRule() {
		return getRuleSimpleAccess().getRule();
	}

	//RuleArrow returns Formula:
	//	RuleDisjunction (({Implication.left=current} "->" | {Equivalence.left=current} "<->") right=RuleDisjunction)*;
	public PropositionalLogicXtextGrammarAccess.RuleArrowElements getRuleArrowAccess() {
		return gaPropositionalLogicXtext.getRuleArrowAccess();
	}
	
	public ParserRule getRuleArrowRule() {
		return getRuleArrowAccess().getRule();
	}

	//RuleDisjunction returns Formula:
	//	RuleConjunction ({Or.left=current} "|" right=RuleConjunction)*;
	public PropositionalLogicXtextGrammarAccess.RuleDisjunctionElements getRuleDisjunctionAccess() {
		return gaPropositionalLogicXtext.getRuleDisjunctionAccess();
	}
	
	public ParserRule getRuleDisjunctionRule() {
		return getRuleDisjunctionAccess().getRule();
	}

	//RuleConjunction returns Formula:
	//	RuleSimple ({And.left=current} "&" right=RuleSimple)*;
	public PropositionalLogicXtextGrammarAccess.RuleConjunctionElements getRuleConjunctionAccess() {
		return gaPropositionalLogicXtext.getRuleConjunctionAccess();
	}
	
	public ParserRule getRuleConjunctionRule() {
		return getRuleConjunctionAccess().getRule();
	}

	//RuleUnaryPropositionalLogic returns Formula:
	//	{Not} "!" formula=RuleStart | RuleAtomic;
	public PropositionalLogicXtextGrammarAccess.RuleUnaryPropositionalLogicElements getRuleUnaryPropositionalLogicAccess() {
		return gaPropositionalLogicXtext.getRuleUnaryPropositionalLogicAccess();
	}
	
	public ParserRule getRuleUnaryPropositionalLogicRule() {
		return getRuleUnaryPropositionalLogicAccess().getRule();
	}

	//RuleAtomic returns Formula:
	//	"(" RuleStart ")" | {RuleVariableUse} variable=ID | {True} "true" | {False} "false";
	public PropositionalLogicXtextGrammarAccess.RuleAtomicElements getRuleAtomicAccess() {
		return gaPropositionalLogicXtext.getRuleAtomicAccess();
	}
	
	public ParserRule getRuleAtomicRule() {
		return getRuleAtomicAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaPropositionalLogicXtext.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaPropositionalLogicXtext.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaPropositionalLogicXtext.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaPropositionalLogicXtext.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaPropositionalLogicXtext.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaPropositionalLogicXtext.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaPropositionalLogicXtext.getANY_OTHERRule();
	} 
}
