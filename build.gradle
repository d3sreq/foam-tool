// build script is based on http://paulonjava.blogspot.de/2013/11/building-bndtools-projects-with-gradle.html

import aQute.bnd.build.Workspace

defaultTasks 'clean', 'bndbuild'

ext.SRC_DIR 			= "main/src"
ext.XTEND_GEN_DIR 		= "main/xtend-gen"
ext.TEST_SRC_DIR 		= "test/src"
ext.TEST_XTEND_GEN_DIR 	= "test/xtend-gen"

//Add bnd as a build dependency
buildscript {
	repositories { mavenCentral() }
	dependencies {
		classpath files('cnf/plugins/biz.aQute.bnd/biz.aQute.bnd-2.4.0.jar')
		classpath 'org.xtend:xtend-gradle-plugin:0.1.+'
	}
}

// Setup the workspace
def parentDir = project.projectDir
Workspace workspace = Workspace.getWorkspace(parentDir)

subprojects { p ->
	apply plugin: 'xtend' // applies plugin 'java'

	dependencies {
		compile 'org.eclipse.xtend:org.eclipse.xtend.lib:2.6.+'
	}
	
	repositories { mavenCentral() }
	
	//Setup source and target directories
	sourceCompatibility = 1.7
	targetCompatibility = 1.7

	sourceSets {
		main {
			java.srcDirs = [SRC_DIR, XTEND_GEN_DIR]
			resources.srcDirs = [SRC_DIR]
			// output.classesDir property is somehow overriden by
			// xtend gradle plugin and classes are always generated into
			// build/classes/main directory. This is probably bug.
//			output.classesDir = BIN_DIR
//			output.resourcesDir = BIN_DIR
			xtendOutputDir = XTEND_GEN_DIR
		}
		
		// TODO
//		test {
//			java.srcDirs = [TEST_SRC_DIR, TEST_XTEND_GEN_DIR]
//			resources.srcDirs = [TEST_SRC_DIR]
////			output.classesDir = 'test/bin'
////			output.resourcesDir = 'test/bin'
//			xtendOutputDir = TEST_XTEND_GEN_DIR
//		}
	}
	testResultsDirName = 'generated/test-reports'
	
	compileXtend.doFirst {
		file(XTEND_GEN_DIR).mkdir()
	}
	
	compileTestXtend.doFirst {
		file(TEST_XTEND_GEN_DIR).mkdir()
	}
	
	//Setup project dependencies
	aQute.bnd.build.Project bndProject = workspace.getProject(p.projectDir)
	bndProject.dependson.each {
		compileXtend.dependsOn(":${it.name}:bndbuild")
	}

	bndProject.getBuildpath().each {
		def f = files(it.file)
		dependencies.add('compile', f)
		
		// to allow use of external libs in build script (e.g. mwe libs)
		buildscript.dependencies.add('classpath', f)
	}
	
	// needed for xtext compiler to find .xtext resource
	//buildscript.dependencies.add('classpath', files(SRC_DIR))

	//Add junit as a default dependency
	dependencies.add('testCompile', 'junit:junit:4.+')

	//Perform the actual bnd build
	task bndbuild << { task ->
		bndProject.build()

		//Report errors and warnings to the Gradle output
		bndProject.warnings.each { logger.warn it }

		bndProject.errors.each { logger.error it }

		//Fail the build if there are build errors
		if(bndProject.errors) {
			throw new  GradleException("Bnd build failure. Check build logs for error messages")
		}
	}

//	bndbuild.dependsOn([
//		'compileJava',
//		'processResources'
//	])
	bndbuild.dependsOn([
		'build'
	])

	//Run integration tests
	task bndtest << { task ->
		if(bndProject.getProperty("Test-Cases")) {
			bndProject.test();
		}
	}

	clean << {
		['generated', XTEND_GEN_DIR, TEST_XTEND_GEN_DIR].each {
			p.file(it).deleteDir()
		}
	}
}

//Collect generated and external bundles for deployment
task release << {
	delete "release"

	ant.taskdef(name: 'bndrelease', classname: 'aQute.bnd.ant.RunconfigToDistributionTask', classpath: 'cnf/plugins/biz.aQute.bnd/biz.aQute.bnd-2.4.0.jar')
	ant.bndrelease(allowsnapshots: true, bndfile: 'org.foam.cli/runnable-foam.bndrun', rootdir: './', outputdir: 'release')
}

//Generate a Gradle wrapper
task wrapper(type: Wrapper) { gradleVersion = '2.0' }