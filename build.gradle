// build script is based on http://paulonjava.blogspot.de/2013/11/building-bndtools-projects-with-gradle.html

import aQute.bnd.build.Workspace
import org.osgi.service.indexer.ResourceIndexer
import org.osgi.service.indexer.impl.RepoIndex

defaultTasks 'clean', 'build', 'release'

ext.SRC_DIR 			= "main/src"
ext.XTEND_GEN_DIR 		= "main/xtend-gen"
ext.TEST_SRC_DIR 		= "test/src"
ext.TEST_XTEND_GEN_DIR 	= "test/xtend-gen"

compileJava.options.encoding = 'UTF-8'

//Add bnd as a build dependency
buildscript {
	repositories { mavenCentral() }
	dependencies {
		classpath files('cnf/plugins/biz.aQute.bnd/biz.aQute.bnd-2.4.0.jar')
		classpath 'org.xtend:xtend-gradle-plugin:0.1.+'
		classpath files('cnf/buildrepo/org.osgi.impl.bundle.repoindex.lib/org.osgi.impl.bundle.repoindex.lib-2.1.2.jar')
	}
}

// Setup the workspace
def parentDir = project.projectDir
Workspace workspace = Workspace.getWorkspace(parentDir)

subprojects { p ->

	apply plugin: 'xtend' // applies plugin 'java'

	// Each 'build' task should create OSGi bundles from compiled classes
	p.tasks.getByName("build").configure {
		inputs.dir "build/classes"
		outputs.dir "build/osgi-bundles"
	}

	// Incremental Java compilation should speed-up the build.
	// It is currently an incubating feature in the new Gradle version
	// but seems to be working fine for FOAM so far.
	tasks.withType(JavaCompile) {
		// temporarily disabled due to cloudbees
		//options.incremental = true
	}

	dependencies {
		compile 'org.eclipse.xtend:org.eclipse.xtend.lib:2.7.2'
	}
	
	repositories { mavenCentral() }
	
	//Setup source and target directories
	sourceCompatibility = 1.7
	targetCompatibility = 1.7

	sourceSets {
		main {

			java.srcDirs = [SRC_DIR, XTEND_GEN_DIR]

			// IMPORTANT: we want to achieve the same behaviour as the Eclipse build system
			// which copies all files from source folders to bin folders
			resources.srcDirs = [SRC_DIR]
			//resources.exclude '**/*.xtend'
			resources.exclude '**/*.java'
			resources.exclude '**/packageinfo'
			resources.exclude '**/*.xtext'
			output.resourcesDir = output.classesDir

			// output.classesDir property is somehow overriden by
			// xtend gradle plugin and classes are always generated into
			// build/classes/main directory. This is probably bug.
//			output.classesDir = 'build/classes/main'
			xtendOutputDir = XTEND_GEN_DIR
		}
		
		// TODO
		test {

			java.srcDirs = [TEST_SRC_DIR, TEST_XTEND_GEN_DIR]

			resources.srcDirs = [TEST_SRC_DIR]
			//resources.exclude '**/*.xtend'
			resources.exclude '**/*.java'
			resources.exclude '**/packageinfo'
			output.resourcesDir = output.classesDir

			xtendOutputDir = TEST_XTEND_GEN_DIR
		}
	}
	testResultsDirName = 'generated/test-reports'
	
	compileXtend.doFirst {
		file(XTEND_GEN_DIR).mkdir()
	}
	
	compileTestXtend.doFirst {
		file(TEST_XTEND_GEN_DIR).mkdir()
	}
	
	//Setup project dependencies
	aQute.bnd.build.Project bndProject = workspace.getProject(p.projectDir)
	bndProject.dependson.each {
		compileXtend.dependsOn(":${it.name}:build")
	}

	bndProject.getBuildpath().each {
		def f = files(it.file)
		dependencies.add('compile', f)
		
		// to allow use of external libs in build script (e.g. mwe libs)
		buildscript.dependencies.add('classpath', f)
	}

	//Add junit as a default dependency
	dependencies.add('testCompile', 'junit:junit:4.+')

	//Perform the actual bnd build
	build << { task ->

		bndProject.build()

		//Report errors and warnings to the Gradle output
		bndProject.warnings.each { logger.warn it }

		bndProject.errors.each { logger.error it }

		//Fail the build if there are build errors
		if(bndProject.errors) {
			throw new GradleException("Bnd build failure. Check build logs for error messages")
		}

		// now, we need to delete all temporary files that are needed only during the build
		// note: they are not intended as output artefacts
		//project.delete "build/tmp", "build/xtend-temp", "build/libs", "build/dependency-cache"
	}

	//Run integration tests - commented as no integration tests are present yet	 
//	task bndtest << { task ->
//		if(bndProject.getProperty("Test-Cases")) {
//			bndProject.test()
//		}
//	}

	clean << {
		project.delete XTEND_GEN_DIR, TEST_XTEND_GEN_DIR
	}

}

//Collect generated and external bundles for deployment
task release << {
	delete "release"
	
	// place jars into "repository" directory
	file("release/repository").mkdirs()
	ant.taskdef(name: 'bndrelease', classname: 'aQute.bnd.ant.RunconfigToDistributionTask', classpath: 'cnf/plugins/biz.aQute.bnd/biz.aQute.bnd-2.4.0.jar')	
	ant.bndrelease(allowsnapshots: true, bndfile: 'org.foam.cli/runnable-foam.bndrun', rootdir: './', outputdir: 'release/repository')
	
	// generate index	 
	def indexer = new RepoIndex()
	def config = [(ResourceIndexer.ROOT_URL): "release/repository", (ResourceIndexer.REPOSITORY_NAME): "FOAM tool repository"]
	def inputs = fileTree(dir: 'release/repository', include: '*.jar') as Set
	def output = new FileOutputStream("release/repository/index.xml.gz")
	indexer.index(inputs, output, config)
	
	// generate runnable .jar
	file('release/distribution').mkdirs()
	workspace.getProject('org.foam.cli').export('runnable-foam.bndrun', false, file('release/distribution/foam-tool.jar'))
}
